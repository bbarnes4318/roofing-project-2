import React, { useState, useEffect } from 'react';

// --- Icon Components ---
const ChartPieIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z" /><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.488 9H15V3.512A9.025 9.025 0 0120.488 9z" /></svg>;
const DocumentTextIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" /></svg>;
const BellIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" /></svg>;
const SparklesIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" /></svg>;
const CogIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" /><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" /></svg>;
const LogoutIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" /></svg>;
const CalendarIcon = ({ className = "h-5 w-5 text-gray-400" }) => <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" /></svg>;
const CheckCircleIcon = ({ className = "h-5 w-5 text-green-500" }) => <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>;
const ChartBarIcon = ({ className = "h-5 w-5 text-purple-500" }) => <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" /></svg>;
const CurrencyDollarIcon = ({ className = "h-5 w-5 text-yellow-500" }) => <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v.01" /></svg>;
const UserGroupIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-indigo-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" /></svg>;
const LocationMarkerIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" /><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" /></svg>;
const ChevronLeftIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" /></svg>;
const ClockIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>;
const CheckBadgeIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-purple-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z" /></svg>;
const RssIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 5c7.73 0 14 6.27 14 14M6 13a7 7 0 017 7m-7-14a1 1 0 11-2 0 1 1 0 012 0z" /></svg>;
const PaperAirplaneIcon = () => <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" /></svg>;
const ChatBubbleLeftRightIcon = () => <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2"><path strokeLinecap="round" strokeLinejoin="round" d="M20.25 8.511c.884.284 1.5 1.128 1.5 2.097v4.286c0 1.136-.847 2.1-1.98 2.193l-3.722.267c-.34.024-.65.18-.882.477a1.125 1.125 0 01-1.587 0c-.232-.297-.542-.453-.882-.477l-3.722-.267A2.25 2.25 0 015.25 15v-4.286c0-.97.616-1.813 1.5-2.097m1.625 3.511l.228.228c.327.327.754.529 1.208.529h.286c.454 0 .881-.202 1.208-.529l.228-.228m1.375 2.134l.228-.228c.327-.327.754-.529 1.208-.529h.286c.454 0 .881.202 1.208-.529l.228-.228m-6.25-2.134l.228.228c.327.327.754.529 1.208.529h.286c.454 0 .881-.202 1.208-.529l.228-.228M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>;
const ClipboardDocumentCheckIcon = () => <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2"><path strokeLinecap="round" strokeLinejoin="round" d="M10.125 2.25h-4.5c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125v-9M10.125 2.25h.375a9 9 0 019 9v.375M10.125 2.25c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125v-9.003M18.002 12a6.002 6.002 0 11-12 0 6.002 6.002 0 0112 0zm-8.25 1.5l2.25-2.25 4.5 4.5" /></svg>;
const ChevronDownIcon = () => <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5"><path strokeLinecap="round" strokeLinejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" /></svg>;
const PlusCircleIcon = () => <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6"><path strokeLinecap="round" strokeLinejoin="round" d="M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>;
const XCircleIcon = () => <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6"><path strokeLinecap="round" strokeLinejoin="round" d="M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>;

// --- MOCK DATA ---
const teamMembers = [
    { id: 'user_1', name: 'Sarah Owner', email: 'sarah@example.com' },
    { id: 'user_2', name: 'Mike Field', email: 'mike@example.com' },
    { id: 'user_3', name: 'John Supervisor', email: 'john@example.com' },
];

const initialProjects = [
    {
        id: 1, name: 'Wilson Residence Roof Replacement', type: 'Roofing', status: 'active', estimateValue: 25000, progress: 35, startDate: 'May 31, 2024', endDate: 'Jun 14, 2024',
        client: { name: 'Betsy Stephens', phone: '(555) 123-4567', email: 'betsy.stephens@email.com' },
        location: '123 Main St, Anytown USA', teamSize: 2, duration: 14,
        messages: [
            { id: 1, author: 'Mike Field', avatar: 'M', content: 'Completed the initial inspection. Photos are uploaded. Decking looks solid.', timestamp: '2 hours ago'},
            { id: 2, author: 'Sarah Owner', avatar: 'S', content: 'Great, thanks Mike. Let\'s get the estimate finalized and sent over to the client by EOD.', timestamp: '1 hour ago' },
        ],
        checklist: [
            { id: 1, stage: 'Pre-Production', items: [ { id: 1, text: 'Contract signed and uploaded', completed: true }, { id: 2, text: 'Permit application submitted', completed: true }, { id: 3, text: 'Material order finalized', completed: false } ] },
            { id: 2, stage: 'Installation', items: [ { id: 4, text: 'Material delivery confirmed', completed: false }, { id: 5, text: 'Daily safety meeting conducted', completed: false }, { id: 6, text: 'Tear-off complete', completed: false } ] },
            { id: 3, stage: 'Closeout', items: [ { id: 7, text: 'Final inspection passed', completed: false }, { id: 8, text: 'Final invoice sent to customer', completed: false }, { id: 9, text: 'Warranty documents delivered', completed: false } ] },
        ]
    },
    {
        id: 2, name: 'Residential Siding Repair', type: 'Siding', status: 'planning', estimateValue: 45000, progress: 10, startDate: 'Jun 9, 2024', endDate: 'Jun 24, 2024',
        client: { name: 'Michael Rodriguez', phone: '(555) 987-6543', email: 'michael.rodriguez@email.com' },
        location: '456 Business Park, Anytown USA', teamSize: 4, duration: 15,
        messages: [ { id: 3, author: 'Sarah Owner', avatar: 'S', content: 'We need to get the permit submitted for the Rodriguez job ASAP.', timestamp: 'Yesterday' } ],
        checklist: [ { id: 4, stage: 'Pre-Production', items: [ { id: 10, text: 'Contract signed and uploaded', completed: true }, { id: 11, text: 'Permit application submitted', completed: false }, { id: 12, text: 'Material order finalized', completed: false } ] } ]
    }
];

const initialTasks = [
    { id: 1, title: 'Roof inspection - 123 Main St', description: 'Complete safety inspection before work begins', assignedTo: 'user_2', projectId: 1, alertDate: '2024-06-04', priority: 'high', status: 'pending' },
    { id: 2, title: 'Submit insurance documentation', description: 'Upload all required forms to customer portal', assignedTo: 'user_3', projectId: 1, alertDate: '2024-06-02', priority: 'high', status: 'overdue' },
    { id: 3, title: 'Material delivery coordination', description: 'Coordinate with supplier for delivery schedule', assignedTo: 'user_3', projectId: 2, alertDate: '2024-06-10', priority: 'medium', status: 'in-progress' }
];

const initialActivityData = [
    { id: 1, author: 'Mike Field', avatar: 'M', content: 'Completed the initial inspection for the Stephens Residence.', timestamp: '2 hours ago', projectId: 1, project: 'Stephens Residence Roof Replacement' },
    { id: 2, author: 'Sarah Owner', avatar: 'S', content: 'We need to get the permit submitted for the Rodriguez job ASAP.', timestamp: 'Yesterday', projectId: 2, project: 'Residential Siding Repair' },
    { id: 3, author: 'John Supervisor', avatar: 'J', content: 'Material delivery confirmed for Stephens job, scheduled for tomorrow morning.', timestamp: 'Yesterday', projectId: 1, project: 'Stephens Residence Roof Replacement' }
];


// --- Helper Components & Functions ---
const getStatusStyles = (status) => {
    switch (status) {
        case 'active': case 'in-progress': return 'bg-blue-100 text-blue-800';
        case 'planning': return 'bg-yellow-100 text-yellow-800';
        case 'pending': return 'bg-gray-100 text-gray-800';
        case 'overdue': return 'bg-red-100 text-red-800';
        case 'completed': return 'bg-green-100 text-green-800';
        default: return 'bg-gray-100 text-gray-800';
    }
};
const getPriorityStyles = (priority) => {
    switch (priority) {
        case 'high': return 'border-l-4 border-red-500';
        case 'medium': return 'border-l-4 border-yellow-500';
        case 'low': return 'border-l-4 border-blue-500';
        default: return 'border-l-4 border-gray-300';
    }
};

// --- Modal Component ---
const Modal = ({ isOpen, onClose, title, children }) => {
    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center p-4">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-lg max-h-full overflow-y-auto">
                <div className="p-6 border-b flex justify-between items-center sticky top-0 bg-white">
                    <h3 className="text-xl font-bold">{title}</h3>
                    <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
                        <XCircleIcon className="w-7 h-7"/>
                    </button>
                </div>
                <div className="p-6">
                    {children}
                </div>
            </div>
        </div>
    );
};


// --- Page Components ---

const DashboardPage = ({tasks, projects}) => {
    const recentTasks = tasks.slice(0, 3);
    const pendingTasks = tasks.filter(t => t.status === 'pending' || t.status === 'overdue').length;
    const activeProjects = projects.filter(p => p.status === 'active').length;
    const totalValue = projects.reduce((sum, p) => sum + p.estimateValue, 0);
    const completedTasksThisWeek = 0;

    const HeaderCard = ({ title, value, subtext, icon }) => (
        <div className="bg-white p-6 rounded-lg shadow-sm">
            <div className="flex justify-between items-center mb-4"><span className="text-gray-500 text-sm font-medium">{title}</span>{icon}</div>
            <p className="text-3xl font-bold text-gray-900">{value}</p>
            <p className="text-sm text-gray-400 mt-1">{subtext}</p>
        </div>
    );

    return (
        <div>
            <div className="mb-8"><h1 className="text-3xl font-bold text-gray-800">Good afternoon, Sarah!</h1><p className="text-gray-500 mt-2">Here's what's happening with your projects today.</p></div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                <HeaderCard title="Pending Tasks" value={pendingTasks} subtext={`${tasks.filter(t => t.status === 'overdue').length} overdue`} icon={<ClockIcon />} />
                <HeaderCard title="Active Projects" value={activeProjects} subtext={`${projects.length} total projects`} icon={<ChartBarIcon className="h-5 w-5 text-green-500" />} />
                <HeaderCard title="Project Value" value={`$${totalValue.toLocaleString()}`} subtext="Total active value" icon={<CurrencyDollarIcon />} />
                <HeaderCard title="Completed Tasks" value={completedTasksThisWeek} subtext="This week" icon={<CheckBadgeIcon />} />
            </div>
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <div className="lg:col-span-2 bg-white p-6 rounded-lg shadow-sm">
                    <h3 className="text-lg font-semibold mb-4">Recent Tasks</h3>
                    <div className="space-y-4">
                        {recentTasks.map(task => (<div key={task.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"><div><p className="font-medium text-gray-800">{task.title}</p><p className="text-sm text-gray-500">{task.description}</p></div><span className={`text-xs font-medium px-2.5 py-0.5 rounded-full capitalize ${getStatusStyles(task.status)}`}>{task.status}</span></div>))}
                    </div>
                </div>
                <div className="bg-white p-6 rounded-lg shadow-sm">
                     <h3 className="text-lg font-semibold mb-4">Project Progress</h3>
                     <div className="space-y-6">{projects.map(project => (<div key={project.id}><div className="flex justify-between mb-1"><span className="text-sm font-medium text-gray-700">{project.name}</span><span className="text-sm font-medium text-gray-700">{project.progress}%</span></div><div className="w-full bg-gray-200 rounded-full h-2.5"><div className="bg-blue-600 h-2.5 rounded-full" style={{ width: `${project.progress}%` }}></div></div></div>))}</div>
                </div>
            </div>
        </div>
    );
};

const ProjectsPage = ({ onProjectSelect, onProjectActionSelect }) => {
    const [projects] = useState(initialProjects);

    const ProjectCard = ({ project }) => (
        <div className="bg-white p-6 rounded-lg shadow-sm">
             <div className="flex justify-between items-start mb-4">
                <div>
                    <h3 className="text-lg font-semibold text-gray-800">{project.name}</h3>
                    <div className="flex items-center mt-2"><span className={`text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full ${getStatusStyles(project.type)}`}>{project.type}</span><span className={`text-xs font-medium px-2.5 py-0.5 rounded-full capitalize ${getStatusStyles(project.status)}`}>{project.status}</span></div>
                </div>
                <p className="text-lg font-semibold text-green-600">${project.estimateValue.toLocaleString()}</p>
            </div>
            <div className="mb-4">
                <div className="flex justify-between mb-1"><span className="text-sm font-medium text-gray-700">Progress</span><span className="text-sm font-medium text-gray-700">{project.progress}%</span></div>
                <div className="w-full bg-gray-200 rounded-full h-2.5"><div className="bg-blue-600 h-2.5 rounded-full" style={{ width: `${project.progress}%` }}></div></div>
            </div>
            <div className="border-t border-gray-200 pt-4 flex justify-between items-center">
                <div className="flex space-x-2">
                     <button onClick={() => onProjectActionSelect(project, 'Messages')} className="flex items-center text-sm bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 rounded-lg shadow-sm"><ChatBubbleLeftRightIcon /> Messages</button>
                     <button onClick={() => onProjectActionSelect(project, 'Checklist')} className="flex items-center text-sm bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2 px-4 rounded-lg shadow-sm"><ClipboardDocumentCheckIcon /> Checklist</button>
                </div>
                <button onClick={() => onProjectSelect(project)} className="text-sm bg-gray-800 hover:bg-gray-900 text-white font-semibold py-2 px-4 rounded-lg shadow-sm">View Details</button>
            </div>
        </div>
    );

    return (
        <div>
            <div className="mb-8 flex justify-between items-center">
                <div><h1 className="text-3xl font-bold text-gray-800">Projects & Checklists</h1><p className="text-gray-500 mt-2">Monitor progress and manage project timelines</p></div>
                <button className="bg-gray-800 text-white font-bold py-2 px-4 rounded-lg hover:bg-gray-900">+ New Project</button>
            </div>
             <div className="space-y-6">{projects.map(p => (<ProjectCard key={p.id} project={p} />))}</div>
        </div>
    );
};

const ProjectDetailPage = ({ project, onBack, initialView = 'Overview', onSendMessage, tasks, projects, onUpdate }) => {
    const [activeView, setActiveView] = useState(initialView);
    const [projectData, setProjectData] = useState(project);

    // This ensures that when the project prop changes (e.g., navigating from another project),
    // the internal state of the detail page resets to the new project.
    useEffect(() => {
        setProjectData(project);
        setActiveView(initialView);
    }, [project, initialView]);


    const handleSendMessage = (p, content) => {
        const newMsg = { id: Date.now(), author: 'Sarah Owner', avatar: 'S', content, timestamp: 'Just now' };
        const updatedProject = { ...projectData, messages: [...projectData.messages, newMsg] };
        setProjectData(updatedProject);
        onUpdate(updatedProject); // Notify parent of the change
    };

    const handleChecklistUpdate = (newChecklist) => {
        const updatedProject = { ...projectData, checklist: newChecklist };
        setProjectData(updatedProject);
        onUpdate(updatedProject); // Notify parent of the change
    };

    const renderProjectView = () => {
        switch(activeView) {
            case 'Checklist':
                return <ProjectChecklistPage project={projectData} onUpdate={handleChecklistUpdate} />;
            case 'Messages':
                return <ProjectMessagesPage project={projectData} onSendMessage={handleSendMessage} />;
            case 'Tasks & Alerts':
                 const ProjectTasksPage = () => {
                    const projectTasks = tasks.filter(t => t.projectId === project.id);
                    return <div className="bg-white p-6 rounded-lg shadow-sm"><h3 className="text-lg font-semibold mb-4">Tasks & Alerts for {project.name}</h3>
                        {projectTasks.length > 0 ? projectTasks.map(task => (<div key={task.id} className="p-3 border-b">{task.title}</div>)) : <p>No tasks for this project.</p>}
                    </div>;
                };
                return <ProjectTasksPage />;
            case 'Overview':
            default:
                const ProjectOverview = () => (
                     <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                        <div className="lg:col-span-1 space-y-6">
                            <div className="bg-white p-6 rounded-lg shadow-sm"><h3 className="text-lg font-semibold border-b pb-3 mb-4">Project Information</h3><div className="space-y-3 text-sm"><p><strong>Status:</strong> <span className={`font-medium px-2 py-0.5 rounded-full capitalize ${getStatusStyles(project.status)}`}>{project.status}</span></p><p><strong>Start Date:</strong> {project.startDate}</p><p><strong>End Date:</strong> {project.endDate}</p><p className="flex items-start"><strong>Location:</strong> <span className="flex"><LocationMarkerIcon/>{project.location}</span></p></div></div>
                            <div className="bg-white p-6 rounded-lg shadow-sm"><h3 className="text-lg font-semibold border-b pb-3 mb-4">Client Information</h3><div className="space-y-3 text-sm"><p><strong>Name:</strong> {project.client.name}</p><p><strong>Phone:</strong> {project.client.phone}</p><p><strong>Email:</strong> {project.client.email}</p></div></div>
                        </div>
                        <div className="lg:col-span-2 space-y-6"><div className="bg-white p-6 rounded-lg shadow-sm"><h3 className="text-lg font-semibold mb-4">Project Timeline</h3><p className="text-gray-500">Timeline visualization will be here.</p></div></div>
                    </div>
                );
                return <ProjectOverview />;
        }
    };

    const navItems = ['Overview', 'Tasks & Alerts', 'Checklist', 'Messages'];

    return (
        <div>
            <div className="mb-6"><button onClick={onBack} className="flex items-center text-sm font-medium text-gray-500 hover:text-gray-700 mb-4"><ChevronLeftIcon />Back to Projects</button><h1 className="text-3xl font-bold text-gray-800">{project.name}</h1><p className="text-gray-500 mt-1">{project.type} Project</p></div>
            <div className="border-b border-gray-200 mb-6"><nav className="-mb-px flex space-x-6" aria-label="Tabs">{navItems.map(item => (<button key={item} onClick={() => setActiveView(item)} className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${activeView === item ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'}`}>{item}</button>))}</nav></div>
            {renderProjectView()}
        </div>
    );
};

const ProjectChecklistPage = ({ project, onUpdate }) => {
    const [checklist, setChecklist] = useState(project.checklist);
    const [openStages, setOpenStages] = useState(project.checklist.map(s => s.id));

    const toggleStage = (stageId) => setOpenStages(prev => prev.includes(stageId) ? prev.filter(id => id !== stageId) : [...prev, stageId]);
    
    const toggleItemCompletion = (stageId, itemId) => {
        const newChecklist = checklist.map(stage => {
            if (stage.id === stageId) {
                const newItems = stage.items.map(item => item.id === itemId ? { ...item, completed: !item.completed } : item);
                return { ...stage, items: newItems };
            }
            return stage;
        });
        setChecklist(newChecklist);
        onUpdate(newChecklist);
        console.log(`ALERT: Checklist item ${itemId} in stage ${stageId} was updated for project ${project.name}. Notifying designated person.`);
    };

    const handleAddItem = (stageId, index) => {
         const newItemText = prompt("Enter the new checklist item:");
         if(newItemText && newItemText.trim() !== '') {
            const newChecklist = checklist.map(stage => {
                if (stage.id === stageId) {
                    const newItem = { id: Date.now(), text: newItemText, completed: false };
                    const newItems = [...stage.items];
                    newItems.splice(index + 1, 0, newItem);
                    return { ...stage, items: newItems };
                }
                return stage;
            });
            setChecklist(newChecklist);
            onUpdate(newChecklist);
            console.log(`ALERT: A new checklist item "${newItemText}" was added to project ${project.name}.`);
         }
    };

    return (
        <div className="space-y-6">
            {checklist.map(stage => {
                const completedItems = stage.items.filter(item => item.completed).length;
                const totalItems = stage.items.length;
                const progress = totalItems > 0 ? (completedItems / totalItems) * 100 : 0;
                const isOpen = openStages.includes(stage.id);

                return (
                    <div key={stage.id} className="bg-white p-6 rounded-lg shadow-sm">
                        <div className="flex justify-between items-center cursor-pointer" onClick={() => toggleStage(stage.id)}>
                             <h3 className="text-xl font-bold text-gray-800">{stage.stage}</h3>
                            <div className="flex items-center">
                               <div className="w-48 bg-gray-200 rounded-full h-2.5 mr-4"><div className="bg-blue-600 h-2.5 rounded-full" style={{ width: `${progress}%` }}></div></div>
                                <span className="text-sm font-medium text-gray-600 w-12 text-right">{Math.round(progress)}%</span>
                                <ChevronDownIcon className={`w-6 h-6 ml-4 transform transition-transform ${isOpen ? 'rotate-180' : ''}`} />
                            </div>
                        </div>
                        {isOpen && (
                            <div className="mt-6 space-y-1">
                                {stage.items.map((item, index) => (
                                    <div key={item.id} className="group flex items-center">
                                        <label className={`flex-1 flex items-center p-3 rounded-md transition-colors duration-200 ${item.completed ? 'bg-green-50 text-gray-500' : 'bg-gray-50 hover:bg-gray-100'}`}>
                                            <input type="checkbox" className="h-5 w-5 rounded text-blue-600 focus:ring-blue-500 border-gray-300 mr-4" checked={item.completed} onChange={() => toggleItemCompletion(stage.id, item.id)} />
                                            <span className={item.completed ? 'line-through' : ''}>{item.text}</span>
                                        </label>
                                        <button onClick={() => handleAddItem(stage.id, index)} className="ml-2 p-1 text-gray-400 hover:text-blue-600 opacity-0 group-hover:opacity-100 transition-opacity">
                                            <PlusCircleIcon className="w-5 h-5" />
                                        </button>
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                )
            })}
        </div>
    )
};

const ProjectMessagesPage = ({ project, onSendMessage }) => {
    const [messages, setMessages] = useState(project.messages);
    const [newMessage, setNewMessage] = useState('');

    useEffect(() => { setMessages(project.messages) }, [project.messages]);

    const handleSendMessage = () => {
        if (!newMessage.trim()) return;
        const newMsg = { id: Date.now(), author: 'Sarah Owner', avatar: 'S', content: newMessage, timestamp: 'Just now' };
        setMessages([...messages, newMsg]);
        setNewMessage('');
        onSendMessage(project, newMessage);
    }
    
    return (
        <div className="bg-white rounded-lg shadow-sm flex flex-col" style={{height: '70vh'}}>
            <div className="p-4 border-b"><h3 className="text-xl font-bold text-gray-800">Project Messages</h3></div>
            <div className="flex-1 p-6 overflow-y-auto space-y-6">
                {messages.map(msg => (
                     <div key={msg.id} className={`flex items-start gap-4 ${msg.author === 'Sarah Owner' ? 'flex-row-reverse' : ''}`}>
                        <div className={`w-10 h-10 rounded-full flex-shrink-0 flex items-center justify-center font-bold text-white ${msg.author === 'Sarah Owner' ? 'bg-blue-600' : 'bg-gray-500'}`}>{msg.avatar}</div>
                        <div className={`p-4 rounded-lg max-w-lg ${msg.author === 'Sarah Owner' ? 'bg-blue-50' : 'bg-gray-100'}`}>
                            <p className="font-semibold">{msg.author}</p>
                            <p className="text-gray-800 mt-1 whitespace-pre-wrap">{msg.content}</p>
                            <p className="text-xs text-gray-400 mt-2 text-right">{msg.timestamp}</p>
                        </div>
                    </div>
                ))}
            </div>
            <div className="p-4 border-t bg-gray-50">
                <div className="flex items-center bg-white rounded-lg border">
                    <input type="text" placeholder="Type your message..." value={newMessage} onChange={(e) => setNewMessage(e.target.value)} className="flex-1 p-3 bg-transparent focus:outline-none" onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()} />
                    <button onClick={handleSendMessage} className="p-3 text-gray-500 hover:text-blue-600"><PaperAirplaneIcon /></button>
                </div>
            </div>
        </div>
    );
};

const ActivityFeedPage = ({ projects, onProjectSelect, activities, onAddActivity }) => {
    const [isComposing, setIsComposing] = useState(false);
    const [composeStep, setComposeStep] = useState(1);
    const [message, setMessage] = useState('');
    const [selectedProjectId, setSelectedProjectId] = useState('');

    const handlePost = () => {
        if (!message) return;
        const project = projects.find(p => p.id === parseInt(selectedProjectId));
        onAddActivity(project, message);
        resetCompose();
    };
    const resetCompose = () => { setIsComposing(false); setComposeStep(1); setMessage(''); setSelectedProjectId(''); }

    return (
        <div>
            <div className="mb-8 flex justify-between items-center">
                <div><h1 className="text-3xl font-bold text-gray-800">Activity Feed</h1><p className="text-gray-500 mt-2">Recent messages and updates from all projects.</p></div>
                {!isComposing && <button onClick={() => setIsComposing(true)} className="bg-gray-800 text-white font-bold py-2 px-4 rounded-lg hover:bg-gray-900">+ New Post</button>}
            </div>
            {isComposing && (
                <div className="bg-white p-6 rounded-lg shadow-sm mb-8">
                    {composeStep === 1 && (<div><h3 className="text-lg font-semibold mb-4">What is this about?</h3><div className="flex space-x-4"><button onClick={() => setComposeStep(2)} className="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700">Project Update</button><button onClick={resetCompose} className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-lg hover:bg-gray-300">Cancel</button></div></div>)}
                    {composeStep === 2 && (<div><h3 className="text-lg font-semibold mb-4">Create New Post</h3><div className="space-y-4"><select value={selectedProjectId} onChange={(e) => setSelectedProjectId(e.target.value)} className="w-full p-2 border border-gray-300 rounded-lg"><option value="">Select a Project to link...</option>{projects.map(p => <option key={p.id} value={p.id}>{p.name}</option>)}</select><textarea value={message} onChange={(e) => setMessage(e.target.value)} placeholder="Write your update here..." className="w-full p-2 border border-gray-300 rounded-lg" rows="4"></textarea><div className="flex justify-end space-x-4"><button onClick={resetCompose} className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-lg hover:bg-gray-300">Cancel</button><button onClick={handlePost} className="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700">Post</button></div></div></div>)}
                </div>
            )}
            <div className="space-y-6">
                {activities.map(activity => (
                    <div key={activity.id} className="bg-white p-6 rounded-lg shadow-sm flex items-start space-x-4">
                        <div className="w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center text-white font-bold flex-shrink-0">{activity.avatar}</div>
                        <div className="flex-1">
                            <p className="font-semibold">{activity.author} <span className="text-gray-500 font-normal text-sm ml-2">{activity.timestamp}</span></p>
                            <p className="text-gray-800 mt-1">{activity.content}</p>
                            {activity.projectId && (<button onClick={() => onProjectSelect(projects.find(p => p.id === activity.projectId))} className="text-sm text-blue-600 hover:underline mt-2">View Project: {activity.project}</button>)}
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

const TasksAndAlertsPage = ({ tasks, projects, onAddTask }) => {
    const [filter, setFilter] = useState('All');
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [newTask, setNewTask] = useState({ title: '', description: '', assignedTo: '', projectId: '', alertDate: '', priority: 'medium', status: 'pending' });

    const handleAddTask = () => {
        if (!newTask.title || !newTask.assignedTo || !newTask.alertDate) {
            alert("Please fill in all required fields (Title, Assign To, Alert Date).");
            return;
        }
        const taskWithId = { ...newTask, id: Date.now() };
        onAddTask(taskWithId);
        
        const assignee = teamMembers.find(tm => tm.id === taskWithId.assignedTo);
        console.log(`--- ALERT TRIGGERED ---
        An alert for the following task has been scheduled.
        An email will be sent to: ${assignee.name} (${assignee.email})
        On Date: ${taskWithId.alertDate}
        Task: ${taskWithId.title}
        Project: ${projects.find(p => p.id == taskWithId.projectId)?.name || 'General Task'}
        --- END ALERT ---`);
        
        setIsModalOpen(false);
        setNewTask({ title: '', description: '', assignedTo: '', projectId: '', alertDate: '', priority: 'medium', status: 'pending' });
    };

    const filteredTasks = tasks.filter(task => {
        if (filter === 'All') return true;
        return task.status.replace('-', ' ').toLowerCase() === filter.toLowerCase();
    });

    return (
        <div>
            <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} title="Create New Task">
                <div className="space-y-4">
                    <div>
                        <label className="block text-sm font-medium text-gray-700">Title <span className="text-red-500">*</span></label>
                        <input type="text" value={newTask.title} onChange={e => setNewTask({...newTask, title: e.target.value})} className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"/>
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-700">Description</label>
                         <textarea value={newTask.description} onChange={e => setNewTask({...newTask, description: e.target.value})} rows="3" className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"></textarea>
                    </div>
                     <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                           <label className="block text-sm font-medium text-gray-700">Assign To <span className="text-red-500">*</span></label>
                           <select value={newTask.assignedTo} onChange={e => setNewTask({...newTask, assignedTo: e.target.value})} className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                               <option value="">Select Member</option>
                               {teamMembers.map(member => <option key={member.id} value={member.id}>{member.name}</option>)}
                           </select>
                       </div>
                        <div>
                           <label className="block text-sm font-medium text-gray-700">Alert Date <span className="text-red-500">*</span></label>
                           <input type="date" value={newTask.alertDate} onChange={e => setNewTask({...newTask, alertDate: e.target.value})} className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"/>
                       </div>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                         <div>
                           <label className="block text-sm font-medium text-gray-700">Link to Project (Optional)</label>
                           <select value={newTask.projectId} onChange={e => setNewTask({...newTask, projectId: e.target.value})} className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                               <option value="">None</option>
                               {projects.map(project => <option key={project.id} value={project.id}>{project.name}</option>)}
                           </select>
                       </div>
                        <div>
                           <label className="block text-sm font-medium text-gray-700">Priority</label>
                           <select value={newTask.priority} onChange={e => setNewTask({...newTask, priority: e.target.value})} className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                               <option value="low">Low</option>
                               <option value="medium">Medium</option>
                               <option value="high">High</option>
                           </select>
                       </div>
                    </div>
                    <div className="flex justify-end space-x-4 pt-4">
                        <button onClick={() => setIsModalOpen(false)} className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-lg hover:bg-gray-300">Cancel</button>
                        <button onClick={handleAddTask} className="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700">Add Task & Alert</button>
                    </div>
                </div>
            </Modal>

            <div className="mb-8 flex justify-between items-center">
                <div><h1 className="text-3xl font-bold text-gray-800">Tasks & Alerts</h1><p className="text-gray-500 mt-2">Manage and track your assigned tasks and notifications.</p></div>
                <button onClick={() => setIsModalOpen(true)} className="bg-gray-800 text-white font-bold py-2 px-4 rounded-lg hover:bg-gray-900">+ New Task</button>
            </div>
            <div className="bg-white p-6 rounded-lg shadow-sm">
                <div className="border-b mb-4 flex items-center justify-between">
                    <div className="flex">{['All', 'Pending', 'In Progress', 'Overdue'].map(f => (<button key={f} onClick={() => setFilter(f)} className={`px-4 py-2 text-sm font-medium ${filter === f ? 'border-b-2 border-blue-600 text-blue-600' : 'text-gray-500 hover:text-blue-600'}`}>{f} ({f === 'All' ? tasks.length : tasks.filter(t => t.status.replace('-', ' ').toLowerCase() === f.toLowerCase()).length})</button>))}</div>
                </div>
                <div className="space-y-4">
                    {filteredTasks.map(task => {
                        const project = projects.find(p => p.id === task.projectId);
                        const assignee = teamMembers.find(m => m.id === task.assignedTo);
                        return (
                            <div key={task.id} className={`p-4 rounded-lg flex items-center justify-between ${getPriorityStyles(task.priority)} bg-gray-50`}>
                                <div className="flex-1">
                                    <p className="font-semibold text-gray-900">{task.title}</p>
                                    <p className="text-sm text-gray-600 mt-1">{task.description}</p>
                                    <div className="flex items-center space-x-4 text-xs text-gray-500 mt-2">
                                        <span>To: <strong>{assignee?.name || 'N/A'}</strong></span>
                                        {project && <span>Project: <strong>{project.name}</strong></span>}
                                        <span>Alert Date: <strong>{task.alertDate}</strong></span>
                                    </div>
                                </div>
                                <div className="text-right">
                                    <span className={`text-xs font-medium px-2.5 py-1 rounded-full capitalize ${getStatusStyles(task.status)}`}>{task.status}</span>
                                    <button className="text-sm mt-2 block w-full bg-white border border-gray-300 text-gray-700 font-semibold py-1 px-3 rounded-lg hover:bg-gray-100">Details</button>
                                </div>
                            </div>
                        )
                    })}
                </div>
            </div>
        </div>
    );
};

const AIAssistantPage = () => (
    <div className="flex flex-col h-full bg-white rounded-lg shadow-sm">
        <div className="p-4 border-b"><h1 className="text-xl font-bold text-gray-800">AI Assistant</h1><p className="text-sm text-gray-500">Your personal assistant for managing projects.</p></div>
        <div className="flex-1 p-6 overflow-y-auto space-y-4">
            <div className="flex justify-center"><div className="grid grid-cols-2 gap-4 max-w-xl"><button className="bg-gray-100 p-4 rounded-lg hover:bg-gray-200 text-left"><p className="font-semibold">Show today's tasks</p></button><button className="bg-gray-100 p-4 rounded-lg hover:bg-gray-200 text-left"><p className="font-semibold">Get project status</p></button><button className="bg-gray-100 p-4 rounded-lg hover:bg-gray-200 text-left"><p className="font-semibold">Create new estimate</p></button><button className="bg-gray-100 p-4 rounded-lg hover:bg-gray-200 text-left"><p className="font-semibold">Field support help</p></button></div></div>
            <div className="flex justify-start"><div className="bg-gray-100 rounded-lg p-3 max-w-lg">Hello! I'm your AI assistant. I can help you with tasks, project updates, estimates, and field support. What can I help you with today?</div></div>
        </div>
        <div className="p-4 border-t bg-gray-50"><div className="flex items-center bg-white rounded-lg border"><input type="text" placeholder="Ask me anything..." className="flex-1 p-3 bg-transparent focus:outline-none" /><button className="p-3 text-gray-500 hover:text-blue-600"><PaperAirplaneIcon /></button></div></div>
    </div>
);
const SettingsPage = () => (<div><h1 className="text-3xl font-bold text-gray-800">Settings</h1><p className="text-gray-500 mt-2">Manage your account and application preferences.</p></div>);


// --- Main Application Component ---
export default function App() {
    const [activePage, setActivePage] = useState('Overview');
    const [selectedProject, setSelectedProject] = useState(null);
    const [projectInitialView, setProjectInitialView] = useState('Overview');
    const [activities, setActivities] = useState(initialActivityData);
    const [tasks, setTasks] = useState(initialTasks);
    const [projects, setProjects] = useState(initialProjects);

    const navigationItems = [
        { name: 'Overview', icon: <ChartPieIcon />, page: 'Overview' },
        { name: 'Activity Feed', icon: <RssIcon />, page: 'Activity Feed' },
        { name: 'Projects & Checklists', icon: <DocumentTextIcon />, page: 'Projects' },
        { name: 'Tasks & Alerts', icon: <BellIcon />, page: 'Tasks & Alerts' },
        { name: 'AI Assistant', icon: <SparklesIcon />, page: 'AI Assistant' },
        { name: 'Settings', icon: <CogIcon />, page: 'Settings' },
    ];

    const navigate = (page) => { setActivePage(page); setSelectedProject(null); };
    
    const handleProjectSelect = (project, view = 'Overview') => { 
        const fullProject = projects.find(p => p.id === project.id); 
        setProjectInitialView(view);
        setSelectedProject(fullProject); 
    };

    const handleBackToProjects = () => { setSelectedProject(null); setActivePage('Projects'); };
    
    const addActivity = (project, content) => {
         const newActivity = { id: Date.now(), author: 'Sarah Owner', avatar: 'S', content: content, timestamp: 'Just now', projectId: project ? project.id : null, project: project ? project.name : null };
         setActivities(prev => [newActivity, ...prev]);
    };
    
    const addTask = (task) => {
        setTasks(prev => [task, ...prev]);
    };

    const handleProjectUpdate = (updatedProject) => {
        const newProjects = projects.map(p => p.id === updatedProject.id ? updatedProject : p);
        setProjects(newProjects);
        setSelectedProject(updatedProject); // Keep the detail page in sync
    };

    const renderPage = () => {
        if (selectedProject) return <ProjectDetailPage project={selectedProject} onBack={handleBackToProjects} initialView={projectInitialView} onSendMessage={addActivity} tasks={tasks} projects={projects} onUpdate={handleProjectUpdate} />;
        switch (activePage) {
            case 'Overview': return <DashboardPage tasks={tasks} projects={projects} />;
            case 'Activity Feed': return <ActivityFeedPage projects={projects} onProjectSelect={handleProjectSelect} activities={activities} onAddActivity={addActivity} />;
            case 'Projects': return <ProjectsPage onProjectSelect={handleProjectSelect} onProjectActionSelect={handleProjectSelect} />;
            case 'Tasks & Alerts': return <TasksAndAlertsPage tasks={tasks} projects={projects} onAddTask={addTask} />;
            case 'AI Assistant': return <AIAssistantPage />;
            case 'Settings': return <SettingsPage />;
            default: return <DashboardPage tasks={tasks} projects={projects}/>;
        }
    };

    return (
        <div className="flex h-screen bg-gray-50 font-sans">
            <aside className="w-64 bg-white shadow-md flex flex-col">
                <div className="p-6 flex items-center space-x-4 border-b">
                    <div className="w-12 h-12 bg-blue-600 rounded-full flex items-center justify-center"><span className="text-2xl font-bold text-white">S</span></div>
                    <div><p className="font-semibold text-lg text-gray-800">Sarah Owner</p><p className="text-sm text-gray-500">Owner</p></div>
                </div>
                <nav className="flex-1 px-4 py-4 space-y-2">
                    {navigationItems.map((item) => (
                        <a key={item.name} href="#" onClick={(e) => { e.preventDefault(); navigate(item.page); }}
                            className={`flex items-center px-4 py-2.5 text-sm font-medium rounded-lg transition-colors duration-200 ${activePage === item.page && !selectedProject ? 'bg-blue-100 text-blue-700' : 'text-gray-600 hover:bg-gray-100 hover:text-gray-900'}`}>
                            <span className="mr-3">{item.icon}</span>{item.name}
                        </a>
                    ))}
                </nav>
                <div className="p-4 border-t border-gray-200">
                     <a href="#" className="flex items-center px-4 py-2.5 text-sm font-medium text-gray-600 hover:bg-gray-100 hover:text-gray-900 rounded-lg">
                        <span className="mr-3 relative"><BellIcon/><span className="absolute top-0 right-0 -mt-1 -mr-1 flex justify-center items-center h-4 w-4 bg-red-500 text-white text-xs rounded-full">{tasks.filter(t=>t.status==='overdue').length}</span></span>Alerts
                    </a>
                    <a href="#" className="flex items-center px-4 py-2.5 text-sm font-medium text-gray-600 hover:bg-gray-100 hover:text-gray-900 rounded-lg">
                        <span className="mr-3"><LogoutIcon /></span>Sign Out
                    </a>
                </div>
            </aside>
            <main className="flex-1 p-8 overflow-y-auto">{renderPage()}</main>
        </div>
    );
}
