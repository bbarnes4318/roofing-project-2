// Prisma schema for Roofing Project Management Application
// This schema preserves all existing project phases, workflow sections, and line items

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===============================
// USER MANAGEMENT
// ===============================

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Basic Information
  firstName String  @db.VarChar(50)
  lastName  String  @db.VarChar(50)
  email     String  @unique @db.VarChar(255)
  password  String  @db.VarChar(255)

  // Profile Information
  avatar     String? @db.VarChar(500)
  phone      String? @db.VarChar(20)
  position   String? @db.VarChar(100)
  department String? @db.VarChar(100)
  bio        String? @db.VarChar(500)

  // Role and Permissions
  role        UserRole     @default(WORKER)
  permissions Permission[]

  // Account Status
  isActive             Boolean   @default(true)
  isVerified           Boolean   @default(false)
  emailVerificationToken String?
  emailVerificationExpires DateTime?

  // Password Reset
  passwordResetToken   String?
  passwordResetExpires DateTime?
  passwordChangedAt    DateTime?

  // Security
  loginAttempts    Int       @default(0)
  lockUntil        DateTime?
  lastLogin        DateTime?
  lastLoginIP      String?   @db.VarChar(45)
  twoFactorSecret  String?
  twoFactorEnabled Boolean   @default(false)

  // Preferences
  theme        Theme    @default(LIGHT)
  notificationPreferences Json?   // Store notification preferences as JSON
  language     String   @default("en") @db.VarChar(5)
  timezone     String   @default("UTC") @db.VarChar(50)

  // Workflow Assignment (NEW FIELD)
  workflowAssignment WorkflowRole @default(OFFICE) @map("workflow_assignment")

  // Professional Information
  skills          String[]
  certifications  Json?    // Store certifications as JSON array
  experience      Int?     // Years of experience
  emergencyContact Json?   // Store emergency contact as JSON

  // Address
  address Json? // Store address as JSON

  // Relationships
  projectsAsManager     Project[]         @relation("ProjectManager")
  projectsAsTeamMember  ProjectTeamMember[]
  assignedTasks         Task[]            @relation("AssignedUser")
  createdTasks          Task[]            @relation("CreatedByUser")
  uploadedDocuments     Document[]        @relation("UploadedBy")
  downloadedDocuments   DocumentDownload[]
  sentMessages          Message[]         @relation("Sender")
  readMessages          MessageRead[]
  createdProjects       Project[]         @relation("CreatedBy")
  calendarEvents        CalendarEvent[]   @relation("Organizer")
  eventAttendees        CalendarEventAttendee[]
  notifications         Notification[]    @relation("Recipient")
  conversationParticipants ConversationParticipant[]
  workflowStepsAssigned WorkflowStep[]    @relation("AssignedTo")
  workflowStepsCompleted WorkflowStep[]   @relation("CompletedBy")
  createdWorkflows      ProjectWorkflow[] @relation("CreatedBy")
  modifiedWorkflows     ProjectWorkflow[] @relation("LastModifiedBy")

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  PROJECT_MANAGER
  FOREMAN
  WORKER
  CLIENT

  @@map("user_roles")
}

enum Permission {
  CREATE_PROJECTS
  EDIT_PROJECTS
  DELETE_PROJECTS
  MANAGE_USERS
  VIEW_REPORTS
  MANAGE_FINANCES
  MANAGE_DOCUMENTS
  MANAGE_CALENDAR
  USE_AI_FEATURES

  @@map("permissions")
}

enum Theme {
  LIGHT
  DARK
  AUTO

  @@map("themes")
}

enum WorkflowRole {
  OFFICE
  ADMIN
  PROJECT_MANAGER
  FIELD_CREW
  ROOF_SUPERVISOR
  FIELD_DIRECTOR

  @@map("workflow_roles")
}

// ===============================
// CUSTOMER MANAGEMENT (Enhanced)
// ===============================

model Customer {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Primary Customer Information
  primaryName  String @db.VarChar(100)
  primaryEmail String @unique @db.VarChar(255)
  primaryPhone String @db.VarChar(20)

  // Secondary Customer Information (NEW REQUIREMENT)
  secondaryName  String? @db.VarChar(100)
  secondaryEmail String? @db.VarChar(255)
  secondaryPhone String? @db.VarChar(20)

  // Primary Contact Selection (NEW REQUIREMENT)
  // When there's only one customer, primaryContact defaults to primary
  // When there are two customers, user must select which is primary contact
  primaryContact ContactType @default(PRIMARY)

  // Address - This will be used as projectName (NEW REQUIREMENT)
  address String @db.VarChar(500)

  // Additional Information
  notes String? @db.VarChar(2000)
  
  // Relationships
  projects Project[]

  @@map("customers")
}

enum ContactType {
  PRIMARY
  SECONDARY

  @@map("contact_types")
}

// ===============================
// PROJECT MANAGEMENT (Enhanced)
// ===============================

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Project Identification
  projectNumber Int    @unique // 5-digit number as required
  // projectName is now interchangeable with customer address (NEW REQUIREMENT)
  projectName   String @db.VarChar(200) // Will store customer address
  projectType   ProjectType

  // Status and Progress
  status   ProjectStatus @default(PENDING)
  archived Boolean       @default(false)
  archivedAt DateTime?
  progress Int           @default(0) // 0-100

  // Project Details  
  description String? @db.VarChar(2000)
  priority    Priority @default(MEDIUM)

  // Financial Information
  budget        Decimal  @db.Decimal(12, 2)
  estimatedCost Decimal? @db.Decimal(12, 2)
  actualCost    Decimal? @db.Decimal(12, 2)

  // Timeline
  startDate DateTime
  endDate   DateTime

  // Notes
  notes String? @db.VarChar(1000)

  // Insurance Claim Status (NEW FIELD)
  isInsuranceClaim Boolean @default(true) @map("is_insurance_claim")

  // Project Manager Contact Information (NEW FIELDS)
  pmPhone String? @db.VarChar(20)
  pmEmail String? @db.VarChar(255)

  // Relationships
  customerId     String             @map("customer_id")
  customer       Customer           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  projectManagerId String?          @map("project_manager_id")
  projectManager   User?            @relation("ProjectManager", fields: [projectManagerId], references: [id])
  
  createdById      String?          @map("created_by_id")
  createdBy        User?            @relation("CreatedBy", fields: [createdById], references: [id])

  // Team and Resources
  teamMembers    ProjectTeamMember[]
  tasks          Task[]
  documents      Document[]
  calendarEvents CalendarEvent[]
  
  // **CRITICAL: Project Workflow - All phases, sections, and line items**
  workflow       ProjectWorkflow?

  @@map("projects")
}

model ProjectTeamMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  userId    String  @map("user_id")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  role      String? @db.VarChar(100)

  @@unique([projectId, userId])
  @@map("project_team_members")
}

enum ProjectType {
  ROOF_REPLACEMENT
  KITCHEN_REMODEL
  BATHROOM_RENOVATION
  SIDING_INSTALLATION
  WINDOW_REPLACEMENT
  FLOORING
  PAINTING
  ELECTRICAL_WORK
  PLUMBING
  HVAC
  DECK_CONSTRUCTION
  LANDSCAPING
  OTHER

  @@map("project_types")
}

enum ProjectStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD

  @@map("project_statuses")
}

enum Priority {
  LOW
  MEDIUM
  HIGH

  @@map("priorities")
}

// ===============================
// **CRITICAL: PROJECT WORKFLOW SYSTEM**
// This preserves ALL project phases, sections, and line items
// ===============================

model ProjectWorkflow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Project Relationship (One-to-One)
  projectId String  @unique @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Workflow Configuration
  workflowType WorkflowType @default(ROOFING)
  status       WorkflowStatus @default(NOT_STARTED)

  // Progress Tracking
  currentStepIndex    Int     @default(0)
  overallProgress     Int     @default(0) // 0-100
  
  // Timeline
  workflowStartDate       DateTime?
  workflowEndDate         DateTime?
  estimatedCompletionDate DateTime?
  actualCompletionDate    DateTime?

  // Alert Settings
  enableAlerts        Boolean @default(true)
  alertMethods        AlertMethod[]
  escalationEnabled   Boolean @default(true)
  escalationDelayDays Int     @default(2)

  // Team Assignments
  teamAssignments Json? // Store team role assignments as JSON

  // Relationships
  createdById      String? @map("created_by_id")
  createdBy        User?   @relation("CreatedBy", fields: [createdById], references: [id])
  
  lastModifiedById String? @map("last_modified_by_id")
  lastModifiedBy   User?   @relation("LastModifiedBy", fields: [lastModifiedById], references: [id])

  // **CRITICAL: All 27 workflow steps with phases, sections, and line items**
  steps WorkflowStep[]

  @@map("project_workflows")
}

// **CRITICAL: This model preserves all project phases and workflow steps**
model WorkflowStep {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Step Identification
  stepId      String @db.VarChar(50) // e.g., "lead_1", "prospect_2", etc.
  stepName    String @db.VarChar(200)
  description String @db.VarChar(1000)

  // **CRITICAL: Project Phase - Must be preserved exactly**
  phase ProjectPhase

  // Responsibility and Assignment
  defaultResponsible ResponsibleRole
  assignedToId       String? @map("assigned_to_id")
  assignedTo         User?   @relation("AssignedTo", fields: [assignedToId], references: [id])

  // Timeline
  estimatedDuration Int // in days
  scheduledStartDate DateTime?
  scheduledEndDate   DateTime?
  actualStartDate    DateTime?
  actualEndDate      DateTime?

  // Completion Status
  isCompleted    Boolean   @default(false)
  completedAt    DateTime?
  completedById  String?   @map("completed_by_id") 
  completedBy    User?     @relation("CompletedBy", fields: [completedById], references: [id])

  // Alert Configuration
  alertPriority     AlertPriority @default(MEDIUM)
  alertDays         Int           @default(1)
  overdueIntervals  Int[]         @default([1, 3, 7, 14])

  // Notes and Documentation
  notes           String? @db.VarChar(2000)
  completionNotes String? @db.VarChar(2000)

  // Dependencies
  dependencies String[] // Array of stepIds that must be completed first

  // Workflow Relationship
  workflowId String          @map("workflow_id")
  workflow   ProjectWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  // **CRITICAL: Subtasks - These are the line items that must be preserved**
  subTasks WorkflowSubTask[]

  // Document Attachments
  attachments WorkflowStepAttachment[]

  @@map("workflow_steps")
}

// **CRITICAL: This model preserves all the individual line items/subtasks**
model WorkflowSubTask {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Subtask Information
  subTaskId    String @db.VarChar(50)
  subTaskName  String @db.VarChar(500)
  description  String? @db.VarChar(1000)

  // Completion Status
  isCompleted   Boolean   @default(false)
  completedAt   DateTime?
  completedById String?   @map("completed_by_id")
  
  // Notes
  notes String? @db.VarChar(1000)

  // Parent Step Relationship
  stepId String       @map("step_id")
  step   WorkflowStep @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@map("workflow_subtasks")
}

model WorkflowStepAttachment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  stepId     String       @map("step_id")
  step       WorkflowStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  
  documentId String       @map("document_id")
  document   Document     @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([stepId, documentId])
  @@map("workflow_step_attachments")
}

// **CRITICAL: Exact project phases from the application**
enum ProjectPhase {
  LEAD         // 🟨 Lead Phase
  PROSPECT     // 🟧 Prospect Phase  
  PROSPECT_NON_INSURANCE // 🟪 Prospect Non-Insurance Phase
  APPROVED     // 🟩 Approved Phase
  EXECUTION    // 🔧 Execution Phase
  SUPPLEMENT   // 🌀 2nd Supplement Phase
  COMPLETION   // 🏁 Completion Phase

  @@map("project_phases")
}

enum WorkflowType {
  ROOFING
  KITCHEN_REMODEL
  BATHROOM_RENOVATION
  SIDING
  WINDOWS
  GENERAL

  @@map("workflow_types")
}

enum WorkflowStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED

  @@map("workflow_statuses")
}

enum ResponsibleRole {
  OFFICE
  ADMINISTRATION
  PROJECT_MANAGER
  FIELD_DIRECTOR
  ROOF_SUPERVISOR

  @@map("responsible_roles")
}

enum AlertPriority {
  LOW
  MEDIUM
  HIGH

  @@map("alert_priorities")
}

enum AlertMethod {
  IN_APP
  EMAIL
  SMS

  @@map("alert_methods")
}

// ===============================
// TASK MANAGEMENT
// ===============================

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String @db.VarChar(200)
  description String? @db.VarChar(2000)
  
  dueDate     DateTime
  status      TaskStatus @default(TO_DO)
  priority    Priority   @default(MEDIUM)
  
  estimatedHours Int?
  actualHours    Int?
  category       TaskCategory @default(OTHER)
  tags           String[]
  notes          String? @db.VarChar(1000)
  completedAt    DateTime?

  // Relationships
  projectId   String  @map("project_id")
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  assignedToId String @map("assigned_to_id")
  assignedTo   User   @relation("AssignedUser", fields: [assignedToId], references: [id])
  
  createdById  String? @map("created_by_id") 
  createdBy    User?   @relation("CreatedByUser", fields: [createdById], references: [id])

  // Dependencies
  dependencies TaskDependency[] @relation("ParentTask")
  dependents   TaskDependency[] @relation("DependentTask")

  @@map("tasks")
}

model TaskDependency {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  parentTaskId    String @map("parent_task_id")
  parentTask      Task   @relation("ParentTask", fields: [parentTaskId], references: [id], onDelete: Cascade)
  
  dependentTaskId String @map("dependent_task_id")
  dependentTask   Task   @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)

  @@unique([parentTaskId, dependentTaskId])
  @@map("task_dependencies")
}

enum TaskStatus {
  TO_DO
  IN_PROGRESS
  DONE

  @@map("task_statuses")
}

enum TaskCategory {
  PLANNING
  DESIGN
  CONSTRUCTION
  INSPECTION
  DOCUMENTATION
  COMMUNICATION
  OTHER

  @@map("task_categories")
}

// ===============================
// DOCUMENT MANAGEMENT
// ===============================

model Document {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fileName     String @db.VarChar(255)
  originalName String @db.VarChar(255)
  fileUrl      String @db.VarChar(1000)
  mimeType     String @db.VarChar(100)
  fileSize     Int
  fileType     DocumentType

  description    String? @db.VarChar(1000)
  tags           String[]
  version        Int     @default(1)
  isActive       Boolean @default(true)
  downloadCount  Int     @default(0)
  lastDownloadedAt DateTime?
  checksum       String? @db.VarChar(255)
  isPublic       Boolean @default(false)

  // Relationships
  projectId    String @map("project_id")
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  uploadedById String  @map("uploaded_by_id")
  uploadedBy   User    @relation("UploadedBy", fields: [uploadedById], references: [id])

  downloads            DocumentDownload[]
  workflowAttachments  WorkflowStepAttachment[]

  @@map("documents")
}

model DocumentDownload {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  documentId String   @map("document_id")
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("document_downloads")
}

enum DocumentType {
  BLUEPRINT
  PERMIT
  INVOICE
  PHOTO
  CONTRACT
  REPORT
  SPECIFICATION
  CORRESPONDENCE
  OTHER

  @@map("document_types")
}

// ===============================
// COMMUNICATION SYSTEM
// ===============================

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String? @db.VarChar(200)
  description String? @db.VarChar(500)
  isGroup     Boolean @default(false)
  isActive    Boolean @default(true)

  messages     Message[]
  participants ConversationParticipant[]

  @@map("conversations")
}

model ConversationParticipant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  conversationId String       @map("conversation_id")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  userId         String       @map("user_id")
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  joinedAt       DateTime     @default(now())
  leftAt         DateTime?
  role           ConversationRole @default(MEMBER)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text        String      @db.Text
  messageType MessageType @default(TEXT)
  isEdited    Boolean     @default(false)
  editedAt    DateTime?
  isDeleted   Boolean     @default(false)
  deletedAt   DateTime?

  // Relationships
  conversationId String       @map("conversation_id")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  senderId       String       @map("sender_id")
  sender         User         @relation("Sender", fields: [senderId], references: [id])
  
  replyToId      String?      @map("reply_to_id")
  replyTo        Message?     @relation("MessageReplies", fields: [replyToId], references: [id])
  replies        Message[]    @relation("MessageReplies")

  // Message metadata
  attachments  Json?         // Store attachments as JSON
  reactions    Json?         // Store reactions as JSON
  systemData   Json?         // Store system message data as JSON

  readBy MessageRead[]

  @@map("messages")
}

model MessageRead {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  messageId String  @map("message_id")
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  userId    String  @map("user_id")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  readAt    DateTime @default(now())

  @@unique([messageId, userId])
  @@map("message_reads")
}

enum ConversationRole {
  ADMIN
  MODERATOR
  MEMBER

  @@map("conversation_roles")
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
  NOTIFICATION

  @@map("message_types")
}

// ===============================
// CALENDAR SYSTEM
// ===============================

model CalendarEvent {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String @db.VarChar(200)
  description String? @db.VarChar(2000)
  startTime   DateTime
  endTime     DateTime
  location    String? @db.VarChar(500)
  isAllDay    Boolean @default(false)
  eventType   EventType @default(MEETING)
  status      EventStatus @default(CONFIRMED)

  // Recurrence
  isRecurring      Boolean @default(false)
  recurrenceRule   String? @db.VarChar(500) // RRULE format
  parentEventId    String? @map("parent_event_id")
  parentEvent      CalendarEvent? @relation("EventRecurrence", fields: [parentEventId], references: [id])
  childEvents      CalendarEvent[] @relation("EventRecurrence")

  // Relationships
  organizerId String  @map("organizer_id")
  organizer   User    @relation("Organizer", fields: [organizerId], references: [id])
  
  projectId   String? @map("project_id")
  project     Project? @relation(fields: [projectId], references: [id])

  attendees CalendarEventAttendee[]

  @@map("calendar_events")
}

model CalendarEventAttendee {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventId  String           @map("event_id")
  event    CalendarEvent    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  userId   String           @map("user_id")
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  status   AttendeeStatus   @default(REQUIRED)
  response AttendeeResponse @default(NO_RESPONSE)

  @@unique([eventId, userId])
  @@map("calendar_event_attendees")
}

enum EventType {
  MEETING
  INSPECTION
  INSTALLATION
  DEADLINE
  REMINDER
  OTHER

  @@map("event_types")
}

enum EventStatus {
  CONFIRMED
  TENTATIVE
  CANCELLED

  @@map("event_statuses")
}

enum AttendeeStatus {
  REQUIRED
  OPTIONAL
  ORGANIZER

  @@map("attendee_statuses")
}

enum AttendeeResponse {
  ACCEPTED
  DECLINED
  TENTATIVE
  NO_RESPONSE

  @@map("attendee_responses")
}

// ===============================
// NOTIFICATION SYSTEM
// ===============================

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String @db.VarChar(200)
  message String @db.VarChar(1000)
  type    NotificationType
  isRead  Boolean @default(false)
  readAt  DateTime?

  // Action data
  actionUrl  String? @db.VarChar(500)
  actionData Json?   // Additional action data as JSON

  // Relationships
  recipientId String @map("recipient_id")
  recipient   User   @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  PROJECT_UPDATE
  WORKFLOW_ALERT
  SYSTEM_MESSAGE
  REMINDER

  @@map("notification_types")
} 