generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                    @id @default(cuid())
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  firstName                String                    @db.VarChar(50)
  lastName                 String                    @db.VarChar(50)
  email                    String                    @unique @db.VarChar(255)
  password                 String                    @db.VarChar(255)
  avatar                   String?                   @db.VarChar(500)
  phone                    String?                   @db.VarChar(20)
  position                 String?                   @db.VarChar(100)
  department               String?                   @db.VarChar(100)
  bio                      String?                   @db.VarChar(500)
  role                     UserRole                  @default(WORKER)
  permissions              Permission[]
  isActive                 Boolean                   @default(true)
  isVerified               Boolean                   @default(false)
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  passwordChangedAt        DateTime?
  loginAttempts            Int                       @default(0)
  lockUntil                DateTime?
  lastLogin                DateTime?
  lastLoginIP              String?                   @db.VarChar(45)
  twoFactorSecret          String?
  twoFactorEnabled         Boolean                   @default(false)
  theme                    Theme                     @default(LIGHT)
  notificationPreferences  Json?
  language                 String                    @default("en") @db.VarChar(5)
  timezone                 String                    @default("UTC") @db.VarChar(50)
  skills                   String[]
  certifications           Json?
  experience               Int?
  emergencyContact         Json?
  address                  Json?
  eventAttendees           CalendarEventAttendee[]
  calendarEvents           CalendarEvent[]           @relation("Organizer")
  conversationParticipants ConversationParticipant[]
  downloadedDocuments      DocumentDownload[]
  uploadedDocuments        Document[]                @relation("UploadedBy")
  readMessages             MessageRead[]
  sentMessages             Message[]                 @relation("Sender")
  notifications            Notification[]            @relation("Recipient")
  authoredMessages         ProjectMessage[]          @relation("MessageAuthor")
  performedOverrides       ProjectPhaseOverride[]    @relation("OverridePerformedBy")
  projectsAsTeamMember     ProjectTeamMember[]
  createdWorkflows         ProjectWorkflow[]         @relation("CreatedBy")
  modifiedWorkflows        ProjectWorkflow[]         @relation("LastModifiedBy")
  createdProjects          Project[]                 @relation("CreatedBy")
  projectsAsManager        Project[]                 @relation("ProjectManager")
  assignedRoles            RoleAssignment[]          @relation("AssignedRoles")
  roleAssignments          RoleAssignment[]          @relation("RoleAssignments")
  assignedTasks            Task[]                    @relation("AssignedUser")
  createdTasks             Task[]                    @relation("CreatedByUser")
  assignedAlerts           WorkflowAlert[]           @relation("AlertAssignedTo")
  createdAlerts            WorkflowAlert[]           @relation("AlertCreatedBy")
  workflowStepsAssigned    WorkflowStep[]            @relation("AssignedTo")
  workflowStepsCompleted   WorkflowStep[]            @relation("CompletedBy")
  completedWorkflowItems   CompletedWorkflowItem[]

  @@map("users")
}

model Customer {
  id             String      @id @default(cuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  primaryName    String      @db.VarChar(100)
  primaryEmail   String      @unique @db.VarChar(255)
  primaryPhone   String      @db.VarChar(20)
  secondaryName  String?     @db.VarChar(100)
  secondaryEmail String?     @db.VarChar(255)
  secondaryPhone String?     @db.VarChar(20)
  primaryContact ContactType @default(PRIMARY)
  address        String      @db.VarChar(500)
  notes          String?     @db.VarChar(2000)
  contacts       Contact[]
  projects       Project[]

  @@map("customers")
}

model Contact {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String   @db.VarChar(100)
  phone      String?  @db.VarChar(20)
  email      String?  @db.VarChar(255)
  role       String?  @db.VarChar(50)
  isPrimary  Boolean  @default(false)
  isActive   Boolean  @default(true)
  notes      String?  @db.VarChar(500)
  customerId String   @map("customer_id")
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([customerId, isPrimary])
  @@index([customerId])
  @@map("contacts")
}

model Project {
  id               String                 @id @default(cuid())
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  projectNumber    Int                    @unique
  projectName      String                 @db.VarChar(200)
  projectType      ProjectType
  status           ProjectStatus          @default(PENDING)
  archived         Boolean                @default(false)
  archivedAt       DateTime?
  progress         Int                    @default(0)
  description      String?                @db.VarChar(2000)
  priority         Priority               @default(MEDIUM)
  budget           Decimal                @db.Decimal(12, 2)
  estimatedCost    Decimal?               @db.Decimal(12, 2)
  actualCost       Decimal?               @db.Decimal(12, 2)
  startDate        DateTime
  endDate          DateTime
  notes            String?                @db.VarChar(1000)
  pmPhone          String?                @db.VarChar(20)
  pmEmail          String?                @db.VarChar(255)
  customerId       String                 @map("customer_id")
  projectManagerId String?                @map("project_manager_id")
  createdById      String?                @map("created_by_id")
  phase            ProjectPhase?
  calendarEvents   CalendarEvent[]
  documents        Document[]
  projectMessages  ProjectMessage[]
  phaseOverrides   ProjectPhaseOverride[]
  teamMembers      ProjectTeamMember[]
  workflow         ProjectWorkflow?
  createdBy        User?                  @relation("CreatedBy", fields: [createdById], references: [id])
  customer         Customer               @relation(fields: [customerId], references: [id], onDelete: Cascade)
  projectManager   User?                  @relation("ProjectManager", fields: [projectManagerId], references: [id])
  tasks            Task[]
  workflowAlerts   WorkflowAlert[]
  workflowTracker  ProjectWorkflowTracker?

  @@map("projects")
}

model ProjectTeamMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  projectId String   @map("project_id")
  userId    String   @map("user_id")
  role      String?  @db.VarChar(100)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_team_members")
}

model ProjectWorkflow {
  id                      String                 @id @default(cuid())
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  projectId               String                 @unique @map("project_id")
  workflowType            WorkflowType           @default(ROOFING)
  status                  WorkflowStatus         @default(NOT_STARTED)
  currentStepIndex        Int                    @default(0)
  overallProgress         Int                    @default(0)
  workflowStartDate       DateTime?
  workflowEndDate         DateTime?
  estimatedCompletionDate DateTime?
  actualCompletionDate    DateTime?
  enableAlerts            Boolean                @default(true)
  alertMethods            AlertMethod[]
  escalationEnabled       Boolean                @default(true)
  escalationDelayDays     Int                    @default(2)
  teamAssignments         Json?
  createdById             String?                @map("created_by_id")
  lastModifiedById        String?                @map("last_modified_by_id")
  phaseOverrides          ProjectPhaseOverride[]
  createdBy               User?                  @relation("CreatedBy", fields: [createdById], references: [id])
  lastModifiedBy          User?                  @relation("LastModifiedBy", fields: [lastModifiedById], references: [id])
  project                 Project                @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workflowAlerts          WorkflowAlert[]
  steps                   WorkflowStep[]

  @@map("project_workflows")
}

model WorkflowStep {
  id                 String                   @id @default(cuid())
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  stepId             String                   @db.VarChar(50)
  stepName           String                   @db.VarChar(200)
  description        String                   @db.VarChar(1000)
  phase              ProjectPhase
  defaultResponsible ResponsibleRole
  assignedToId       String?                  @map("assigned_to_id")
  estimatedDuration  Int
  stepOrder          Int
  scheduledStartDate DateTime?
  scheduledEndDate   DateTime?
  actualStartDate    DateTime?
  actualEndDate      DateTime?
  isCompleted        Boolean                  @default(false)
  completedAt        DateTime?
  completedById      String?                  @map("completed_by_id")
  alertPriority      AlertPriority            @default(MEDIUM)
  alertDays          Int                      @default(1)
  overdueIntervals   Int[]                    @default([1, 3, 7, 14])
  notes              String?                  @db.VarChar(2000)
  completionNotes    String?                  @db.VarChar(2000)
  dependencies       String[]
  workflowId         String                   @map("workflow_id")
  workflowAlerts     WorkflowAlert[]
  attachments        WorkflowStepAttachment[]
  assignedTo         User?                    @relation("AssignedTo", fields: [assignedToId], references: [id])
  completedBy        User?                    @relation("CompletedBy", fields: [completedById], references: [id])
  workflow           ProjectWorkflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  subTasks           WorkflowSubTask[]

  @@map("workflow_steps")
}

model WorkflowSubTask {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  subTaskId     String       @db.VarChar(50)
  subTaskName   String       @db.VarChar(500)
  description   String?      @db.VarChar(1000)
  isCompleted   Boolean      @default(false)
  completedAt   DateTime?
  completedById String?      @map("completed_by_id")
  notes         String?      @db.VarChar(1000)
  stepId        String       @map("step_id")
  step          WorkflowStep @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@map("workflow_subtasks")
}

model WorkflowStepAttachment {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  stepId     String       @map("step_id")
  documentId String       @map("document_id")
  document   Document     @relation(fields: [documentId], references: [id], onDelete: Cascade)
  step       WorkflowStep @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@unique([stepId, documentId])
  @@map("workflow_step_attachments")
}

model WorkflowAlert {
  id              String          @id @default(cuid())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  type            String          @default("Work Flow Line Item") @db.VarChar(100)
  priority        AlertPriority   @default(MEDIUM)
  status          AlertStatus     @default(ACTIVE)
  title           String          @db.VarChar(255)
  message         String
  stepName        String          @db.VarChar(255)
  isRead          Boolean         @default(false)
  readAt          DateTime?
  acknowledged    Boolean         @default(false)
  acknowledgedAt  DateTime?
  dueDate         DateTime?
  projectId       String          @map("project_id")
  workflowId      String          @map("workflow_id")
  stepId          String          @map("step_id")
  assignedToId    String?         @map("assigned_to_id")
  createdById     String?         @map("created_by_id")
  metadata        Json?
  responsibleRole ResponsibleRole @default(OFFICE)
  assignedTo      User?           @relation("AlertAssignedTo", fields: [assignedToId], references: [id])
  createdBy       User?           @relation("AlertCreatedBy", fields: [createdById], references: [id])
  project         Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  step            WorkflowStep    @relation(fields: [stepId], references: [id], onDelete: Cascade)
  workflow        ProjectWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([projectId, status])
  @@index([assignedToId, status])
  @@index([workflowId, stepId])
  @@index([createdAt(sort: Desc), projectId])
  @@index([stepId, status])
  @@unique([projectId, stepId, status], map: "unique_active_alert")
  @@map("workflow_alerts")
}

model Task {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  title          String           @db.VarChar(200)
  description    String?          @db.VarChar(2000)
  dueDate        DateTime
  status         TaskStatus       @default(TO_DO)
  priority       Priority         @default(MEDIUM)
  estimatedHours Int?
  actualHours    Int?
  category       TaskCategory     @default(OTHER)
  tags           String[]
  notes          String?          @db.VarChar(1000)
  completedAt    DateTime?
  projectId      String           @map("project_id")
  assignedToId   String           @map("assigned_to_id")
  createdById    String?          @map("created_by_id")
  dependents     TaskDependency[] @relation("DependentTask")
  dependencies   TaskDependency[] @relation("ParentTask")
  assignedTo     User             @relation("AssignedUser", fields: [assignedToId], references: [id])
  createdBy      User?            @relation("CreatedByUser", fields: [createdById], references: [id])
  project        Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model TaskDependency {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  parentTaskId    String   @map("parent_task_id")
  dependentTaskId String   @map("dependent_task_id")
  dependentTask   Task     @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)
  parentTask      Task     @relation("ParentTask", fields: [parentTaskId], references: [id], onDelete: Cascade)

  @@unique([parentTaskId, dependentTaskId])
  @@map("task_dependencies")
}

model Document {
  id                  String                   @id @default(cuid())
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  fileName            String                   @db.VarChar(255)
  originalName        String                   @db.VarChar(255)
  fileUrl             String                   @db.VarChar(1000)
  mimeType            String                   @db.VarChar(100)
  fileSize            Int
  fileType            DocumentType
  description         String?                  @db.VarChar(1000)
  tags                String[]
  version             Int                      @default(1)
  isActive            Boolean                  @default(true)
  downloadCount       Int                      @default(0)
  lastDownloadedAt    DateTime?
  checksum            String?                  @db.VarChar(255)
  isPublic            Boolean                  @default(false)
  projectId           String                   @map("project_id")
  uploadedById        String                   @map("uploaded_by_id")
  downloads           DocumentDownload[]
  project             Project                  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedBy          User                     @relation("UploadedBy", fields: [uploadedById], references: [id])
  workflowAttachments WorkflowStepAttachment[]

  @@map("documents")
}

model DocumentDownload {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  documentId String   @map("document_id")
  userId     String   @map("user_id")
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("document_downloads")
}

model ProjectMessage {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  content           String
  subject           String             @db.VarChar(255)
  messageType       ProjectMessageType @default(WORKFLOW_UPDATE)
  priority          MessagePriority    @default(MEDIUM)
  authorId          String?            @map("author_id")
  authorName        String             @db.VarChar(100)
  authorRole        String?            @db.VarChar(50)
  projectId         String             @map("project_id")
  projectNumber     Int
  workflowId        String?            @map("workflow_id")
  stepId            String?            @map("step_id")
  stepName          String?            @db.VarChar(255)
  phase             ProjectPhase?
  section           String?            @db.VarChar(255)
  lineItem          String?            @db.VarChar(255)
  isSystemGenerated Boolean            @default(false)
  isWorkflowMessage Boolean            @default(false)
  parentMessageId   String?            @map("parent_message_id")
  readBy            String[]           @default([])
  readCount         Int                @default(0)
  metadata          Json?
  author            User?              @relation("MessageAuthor", fields: [authorId], references: [id])
  parentMessage     ProjectMessage?    @relation("MessageReplies", fields: [parentMessageId], references: [id])
  replies           ProjectMessage[]   @relation("MessageReplies")
  project           Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, createdAt])
  @@index([workflowId, stepId])
  @@index([phase])
  @@index([isSystemGenerated])
  @@index([authorId])
  @@map("project_messages")
}

model Conversation {
  id           String                    @id @default(cuid())
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  title        String?                   @db.VarChar(200)
  description  String?                   @db.VarChar(500)
  isGroup      Boolean                   @default(false)
  isActive     Boolean                   @default(true)
  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  conversationId String           @map("conversation_id")
  userId         String           @map("user_id")
  joinedAt       DateTime         @default(now())
  leftAt         DateTime?
  role           ConversationRole @default(MEMBER)
  conversation   Conversation     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  text           String
  messageType    MessageType   @default(TEXT)
  isEdited       Boolean       @default(false)
  editedAt       DateTime?
  isDeleted      Boolean       @default(false)
  deletedAt      DateTime?
  conversationId String        @map("conversation_id")
  senderId       String        @map("sender_id")
  replyToId      String?       @map("reply_to_id")
  attachments    Json?
  reactions      Json?
  systemData     Json?
  readBy         MessageRead[]
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  replyTo        Message?      @relation("MessageReplies", fields: [replyToId], references: [id])
  replies        Message[]     @relation("MessageReplies")
  sender         User          @relation("Sender", fields: [senderId], references: [id])

  @@map("messages")
}

model MessageRead {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  messageId String   @map("message_id")
  userId    String   @map("user_id")
  readAt    DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_reads")
}

model CalendarEvent {
  id             String                  @id @default(cuid())
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  title          String                  @db.VarChar(200)
  description    String?                 @db.VarChar(2000)
  startTime      DateTime
  endTime        DateTime
  location       String?                 @db.VarChar(500)
  isAllDay       Boolean                 @default(false)
  eventType      EventType               @default(MEETING)
  status         EventStatus             @default(CONFIRMED)
  isRecurring    Boolean                 @default(false)
  recurrenceRule String?                 @db.VarChar(500)
  parentEventId  String?                 @map("parent_event_id")
  organizerId    String                  @map("organizer_id")
  projectId      String?                 @map("project_id")
  attendees      CalendarEventAttendee[]
  organizer      User                    @relation("Organizer", fields: [organizerId], references: [id])
  parentEvent    CalendarEvent?          @relation("EventRecurrence", fields: [parentEventId], references: [id])
  childEvents    CalendarEvent[]         @relation("EventRecurrence")
  project        Project?                @relation(fields: [projectId], references: [id])

  @@map("calendar_events")
}

model CalendarEventAttendee {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  eventId   String           @map("event_id")
  userId    String           @map("user_id")
  status    AttendeeStatus   @default(REQUIRED)
  response  AttendeeResponse @default(NO_RESPONSE)
  event     CalendarEvent    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("calendar_event_attendees")
}

model Notification {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  title       String           @db.VarChar(200)
  message     String           @db.VarChar(1000)
  type        NotificationType
  isRead      Boolean          @default(false)
  readAt      DateTime?
  actionUrl   String?          @db.VarChar(500)
  actionData  Json?
  recipientId String           @map("recipient_id")
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ProjectPhaseOverride {
  id                  String                    @id @default(cuid())
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  projectId           String                    @map("project_id")
  workflowId          String                    @map("workflow_id")
  fromPhase           ProjectPhase              @map("from_phase")
  toPhase             ProjectPhase              @map("to_phase")
  overriddenById      String                    @map("overridden_by_id")
  reason              String?                   @db.VarChar(500)
  suppressAlertsFor   ProjectPhase[]
  autoLogMessage      String
  isActive            Boolean                   @default(true)
  conversationMessage String?                   @map("conversation_message_id")
  overriddenBy        User                      @relation("OverridePerformedBy", fields: [overriddenById], references: [id])
  project             Project                   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  workflow            ProjectWorkflow           @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  suppressedAlerts    SuppressedWorkflowAlert[]

  @@index([projectId])
  @@index([workflowId])
  @@index([overriddenById])
  @@index([createdAt])
  @@map("project_phase_overrides")
}

model SuppressedWorkflowAlert {
  id                 String               @id @default(cuid())
  createdAt          DateTime             @default(now())
  originalAlertId    String               @unique @map("original_alert_id")
  overrideId         String               @map("override_id")
  suppressedPhase    ProjectPhase         @map("suppressed_phase")
  suppressedStepId   String               @map("suppressed_step_id")
  suppressedStepName String               @map("suppressed_step_name") @db.VarChar(255)
  originalTitle      String               @map("original_title") @db.VarChar(255)
  originalMessage    String               @map("original_message")
  originalPriority   AlertPriority        @map("original_priority")
  suppressionReason  String               @map("suppression_reason") @db.VarChar(500)
  override           ProjectPhaseOverride @relation(fields: [overrideId], references: [id], onDelete: Cascade)

  @@index([overrideId])
  @@index([suppressedPhase])
  @@index([createdAt])
  @@map("suppressed_workflow_alerts")
}

model RoleAssignment {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  roleType     RoleType @unique @map("role_type")
  userId       String   @map("user_id")
  assignedAt   DateTime @map("assigned_at")
  assignedById String?  @map("assigned_by_id")
  isActive     Boolean  @default(true)
  assignedBy   User?    @relation("AssignedRoles", fields: [assignedById], references: [id])
  user         User     @relation("RoleAssignments", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([roleType])
  @@index([assignedAt])
  @@index([roleType, isActive])
  @@map("role_assignments")
}

enum UserRole {
  ADMIN
  MANAGER
  PROJECT_MANAGER
  FOREMAN
  WORKER
  CLIENT

  @@map("user_roles")
}

enum Permission {
  CREATE_PROJECTS
  EDIT_PROJECTS
  DELETE_PROJECTS
  MANAGE_USERS
  VIEW_REPORTS
  MANAGE_FINANCES
  MANAGE_DOCUMENTS
  MANAGE_CALENDAR
  USE_AI_FEATURES

  @@map("permissions")
}

enum Theme {
  LIGHT
  DARK
  AUTO

  @@map("themes")
}

enum ContactType {
  PRIMARY
  SECONDARY

  @@map("contact_types")
}

enum ProjectType {
  ROOF_REPLACEMENT
  KITCHEN_REMODEL
  BATHROOM_RENOVATION
  SIDING_INSTALLATION
  WINDOW_REPLACEMENT
  FLOORING
  PAINTING
  ELECTRICAL_WORK
  PLUMBING
  HVAC
  DECK_CONSTRUCTION
  LANDSCAPING
  OTHER

  @@map("project_types")
}

enum ProjectStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD

  @@map("project_statuses")
}

enum Priority {
  LOW
  MEDIUM
  HIGH

  @@map("priorities")
}

enum ProjectPhase {
  LEAD
  PROSPECT
  APPROVED
  EXECUTION
  SECOND_SUPPLEMENT
  COMPLETION

  @@map("project_phases")
}

enum WorkflowType {
  ROOFING
  KITCHEN_REMODEL
  BATHROOM_RENOVATION
  SIDING
  WINDOWS
  GENERAL

  @@map("workflow_types")
}

enum WorkflowStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED

  @@map("workflow_statuses")
}

enum ResponsibleRole {
  OFFICE
  ADMINISTRATION
  PROJECT_MANAGER
  FIELD_DIRECTOR
  ROOF_SUPERVISOR

  @@map("responsible_roles")
}

enum AlertPriority {
  LOW
  MEDIUM
  HIGH

  @@map("alert_priorities")
}

enum AlertMethod {
  IN_APP
  EMAIL
  SMS

  @@map("alert_methods")
}

enum AlertStatus {
  ACTIVE
  ACKNOWLEDGED
  DISMISSED
  COMPLETED

  @@map("alert_status")
}

enum TaskStatus {
  TO_DO
  IN_PROGRESS
  DONE

  @@map("task_statuses")
}

enum TaskCategory {
  PLANNING
  DESIGN
  CONSTRUCTION
  INSPECTION
  DOCUMENTATION
  COMMUNICATION
  OTHER

  @@map("task_categories")
}

enum DocumentType {
  BLUEPRINT
  PERMIT
  INVOICE
  PHOTO
  CONTRACT
  REPORT
  SPECIFICATION
  CORRESPONDENCE
  OTHER

  @@map("document_types")
}

enum ProjectMessageType {
  WORKFLOW_UPDATE
  PHASE_COMPLETION
  STEP_COMPLETION
  USER_MESSAGE
  SYSTEM_NOTIFICATION
  ALERT_DISCUSSION
  PROJECT_MILESTONE

  @@map("project_message_types")
}

enum MessagePriority {
  LOW
  MEDIUM
  HIGH
  URGENT

  @@map("message_priorities")
}

enum ConversationRole {
  ADMIN
  MODERATOR
  MEMBER

  @@map("conversation_roles")
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
  NOTIFICATION

  @@map("message_types")
}

enum EventType {
  MEETING
  INSPECTION
  INSTALLATION
  DEADLINE
  REMINDER
  OTHER

  @@map("event_types")
}

enum EventStatus {
  CONFIRMED
  TENTATIVE
  CANCELLED

  @@map("event_statuses")
}

enum AttendeeStatus {
  REQUIRED
  OPTIONAL
  ORGANIZER

  @@map("attendee_statuses")
}

enum AttendeeResponse {
  ACCEPTED
  DECLINED
  TENTATIVE
  NO_RESPONSE

  @@map("attendee_responses")
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  PROJECT_UPDATE
  WORKFLOW_ALERT
  SYSTEM_MESSAGE
  REMINDER

  @@map("notification_types")
}

enum RoleType {
  PROJECT_MANAGER
  FIELD_DIRECTOR
  OFFICE_STAFF
  ADMINISTRATION

  @@map("role_types")
}

// Workflow Template Models - Define the structure of workflows
model WorkflowPhase {
  id               String             @id @default(cuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  phaseName        String             @db.VarChar(100)
  phaseType        ProjectPhase
  displayOrder     Int
  description      String?            @db.VarChar(500)
  isActive         Boolean            @default(true)
  sections         WorkflowSection[]
  projectTrackers  ProjectWorkflowTracker[]

  @@unique([phaseType])
  @@map("workflow_phases")
}

model WorkflowSection {
  id               String             @id @default(cuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  sectionNumber    String             @db.VarChar(10)  // "1", "2", etc.
  sectionName      String             @db.VarChar(200)
  displayName      String             @db.VarChar(255) // With emojis and role
  displayOrder     Int
  description      String?            @db.VarChar(500)
  isActive         Boolean            @default(true)
  phaseId          String             @map("phase_id")
  phase            WorkflowPhase      @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  lineItems        WorkflowLineItem[]
  projectTrackers  ProjectWorkflowTracker[]

  @@unique([phaseId, sectionNumber])
  @@index([phaseId])
  @@map("workflow_sections")
}

model WorkflowLineItem {
  id               String                 @id @default(cuid())
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  itemLetter       String                 @db.VarChar(10)  // "a", "b", etc.
  itemName         String                 @db.VarChar(500)
  responsibleRole  ResponsibleRole
  displayOrder     Int
  description      String?                @db.VarChar(1000)
  isActive         Boolean                @default(true)
  estimatedMinutes Int                    @default(30)
  alertDays        Int                    @default(1)
  sectionId        String                 @map("section_id")
  section          WorkflowSection        @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  progressTrackers ProjectWorkflowTracker[]

  @@unique([sectionId, itemLetter])
  @@index([sectionId])
  @@index([sectionId, displayOrder])
  @@index([isActive, displayOrder])
  @@map("workflow_line_items")
}

// Track current position in workflow for each project
model ProjectWorkflowTracker {
  id                    String           @id @default(cuid())
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  projectId             String           @unique @map("project_id")
  currentPhaseId        String?          @map("current_phase_id")
  currentSectionId      String?          @map("current_section_id")
  currentLineItemId     String?          @map("current_line_item_id")
  lastCompletedItemId   String?          @map("last_completed_item_id")
  phaseStartedAt        DateTime?
  sectionStartedAt      DateTime?
  lineItemStartedAt     DateTime?
  project               Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  currentPhase          WorkflowPhase?   @relation(fields: [currentPhaseId], references: [id])
  currentSection        WorkflowSection? @relation(fields: [currentSectionId], references: [id])
  currentLineItem       WorkflowLineItem?@relation(fields: [currentLineItemId], references: [id])
  completedItems        CompletedWorkflowItem[]

  @@index([currentLineItemId])
  @@index([projectId, currentPhaseId])
  @@map("project_workflow_trackers")
}

// Track all completed items for history
model CompletedWorkflowItem {
  id              String                 @id @default(cuid())
  createdAt       DateTime               @default(now())
  trackerId       String                 @map("tracker_id")
  phaseId         String                 @map("phase_id")
  sectionId       String                 @map("section_id")
  lineItemId      String                 @map("line_item_id")
  completedAt     DateTime               @default(now())
  completedById   String?                @map("completed_by_id")
  notes           String?                @db.VarChar(1000)
  tracker         ProjectWorkflowTracker @relation(fields: [trackerId], references: [id], onDelete: Cascade)
  completedBy     User?                  @relation(fields: [completedById], references: [id])

  @@index([trackerId])
  @@index([completedAt])
  @@index([trackerId, lineItemId])
  @@index([trackerId, completedAt])
  @@map("completed_workflow_items")
}
