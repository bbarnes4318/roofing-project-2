generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                    @id @default(cuid())
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  firstName                String                    @db.VarChar(100)
  lastName                 String                    @db.VarChar(100)
  email                    String                    @unique @db.VarChar(320)
  password                 String                    @db.VarChar(255)
  avatar                   String?                   @db.VarChar(2000)
  phone                    String?                   @db.VarChar(20)
  position                 String?                   @db.VarChar(100)
  department               String?                   @db.VarChar(100)
  bio                      String?                   @db.VarChar(500)
  role                     UserRole                  @default(WORKER)
  permissions              Permission[]
  isActive                 Boolean                   @default(true)
  isVerified               Boolean                   @default(false)
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  passwordChangedAt        DateTime?
  loginAttempts            Int                       @default(0)
  lockUntil                DateTime?
  lastLogin                DateTime?
  lastLoginIP              String?                   @db.VarChar(45)
  twoFactorSecret          String?
  twoFactorEnabled         Boolean                   @default(false)
  theme                    Theme                     @default(LIGHT)
  notificationPreferences  Json?
  language                 String                    @default("en") @db.VarChar(5)
  timezone                 String                    @default("UTC") @db.VarChar(50)
  skills                   String[]
  certifications           Json?
  experience               Int?
  emergencyContact         Json?
  address                  Json?
  eventAttendees           CalendarEventAttendee[]
  calendarEvents           CalendarEvent[]           @relation("Organizer")
  completedWorkflowItems   CompletedWorkflowItem[]
  conversationParticipants ConversationParticipant[]
  downloadedDocuments      DocumentDownload[]
  uploadedDocuments        Document[]                @relation("UploadedBy")
  readMessages             MessageRead[]
  sentMessages             Message[]                 @relation("Sender")
  notifications            Notification[]            @relation("Recipient")
  projectMessageRecipients ProjectMessageRecipient[]
  authoredMessages         ProjectMessage[]          @relation("MessageAuthor")
  projectsAsTeamMember     ProjectTeamMember[]
  createdProjects          Project[]                 @relation("CreatedBy")
  projectsAsManager        Project[]                 @relation("ProjectManager")
  assignedRoles            RoleAssignment[]          @relation("AssignedRoles")
  roleAssignments          RoleAssignment[]          @relation("RoleAssignments")
  resolvedSecurityEvents   SecurityEvent[]           @relation("SecurityEventResolver")
  securityEvents           SecurityEvent[]           @relation("SecurityEvents")
  assignedTasks            Task[]                    @relation("AssignedUser")
  createdTasks             Task[]                    @relation("CreatedByUser")
  behaviorPattern          UserBehaviorPattern?      @relation("UserBehavior")
  devices                  UserDevice[]              @relation("UserDevices")
  mfaSettings              UserMFA[]                 @relation("UserMFA")
  voiceTranscripts         VoiceTranscript[]
  webauthnCredentials      WebAuthnCredential[]      @relation("UserWebAuthn")
  assignedAlerts           WorkflowAlert[]           @relation("AlertAssignedTo")
  createdAlerts            WorkflowAlert[]           @relation("AlertCreatedBy")
  companyAssets            CompanyAsset[]
  documentTemplates        DocumentTemplate[]
  generatedDocuments       GeneratedDocumentMeta[]

  @@map("users")
}

model Customer {
  id             String      @id @default(cuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  primaryName    String      @db.VarChar(100)
  primaryEmail   String      @unique @db.VarChar(320)
  primaryPhone   String      @db.VarChar(20)
  secondaryName  String?     @db.VarChar(100)
  secondaryEmail String?     @db.VarChar(320)
  secondaryPhone String?     @db.VarChar(20)
  primaryContact ContactType @default(PRIMARY)
  address        String      @db.VarChar(500)
  notes          String?
  isActive       Boolean     @default(true)
  primaryRole    String?     @db.VarChar(50)
  secondaryRole  String?     @db.VarChar(50)
  projects       Project[]

  @@map("customers")
}

model Project {
  id               String                   @id @default(cuid())
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  projectNumber    Int                      @unique
  projectName      String                   @db.VarChar(255)
  projectType      ProjectType
  status           ProjectStatus            @default(PENDING)
  archived         Boolean                  @default(false)
  archivedAt       DateTime?
  progress         Int                      @default(0)
  description      String?                  @db.VarChar(500)
  priority         Priority                 @default(MEDIUM)
  budget           Decimal                  @db.Decimal(12, 2)
  estimatedCost    Decimal?                 @db.Decimal(12, 2)
  actualCost       Decimal?                 @db.Decimal(12, 2)
  startDate        DateTime
  endDate          DateTime
  notes            String?
  pmPhone          String?                  @db.VarChar(20)
  pmEmail          String?                  @db.VarChar(320)
  customerId       String                   @map("customer_id")
  projectManagerId String?                  @map("project_manager_id")
  createdById      String?                  @map("created_by_id")
  phase            ProjectPhase?
  searchVector     String?
  calendarEvents   CalendarEvent[]
  documents        Document[]
  projectMessages  ProjectMessage[]
  phaseOverrides   ProjectPhaseOverride[]
  teamMembers      ProjectTeamMember[]
  workflowTrackers ProjectWorkflowTracker[]
  createdBy        User?                    @relation("CreatedBy", fields: [createdById], references: [id])
  customer         Customer                 @relation(fields: [customerId], references: [id], onDelete: Cascade)
  projectManager   User?                    @relation("ProjectManager", fields: [projectManagerId], references: [id])
  tasks            Task[]
  voiceTranscripts VoiceTranscript[]
  workflowAlerts   WorkflowAlert[]

  @@map("projects")
}

model ProjectTeamMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  projectId String   @map("project_id")
  userId    String   @map("user_id")
  role      String?  @db.VarChar(100)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_team_members")
}

model ProjectPhaseOverride {
  id                String         @id @default(cuid())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  projectId         String         @map("project_id")
  fromPhase         ProjectPhase   @map("from_phase")
  toPhase           ProjectPhase   @map("to_phase")
  suppressAlertsFor ProjectPhase[]
  isActive          Boolean        @default(true)
  project           Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@map("project_phase_overrides")
}

model WorkflowAlert {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  type            String            @default("Work Flow Line Item") @db.VarChar(100)
  priority        AlertPriority     @default(MEDIUM)
  status          AlertStatus       @default(ACTIVE)
  title           String            @db.VarChar(255)
  message         String            @db.VarChar(2000)
  stepName        String            @db.VarChar(255)
  isRead          Boolean           @default(false)
  readAt          DateTime?
  acknowledged    Boolean           @default(false)
  acknowledgedAt  DateTime?
  dueDate         DateTime?
  projectId       String            @map("project_id")
  assignedToId    String?           @map("assigned_to_id")
  createdById     String?           @map("created_by_id")
  metadata        Json?
  responsibleRole ResponsibleRole   @default(OFFICE)
  lineItemId      String?           @map("line_item_id")
  phaseId         String?           @map("phase_id")
  sectionId       String?           @map("section_id")
  assignedTo      User?             @relation("AlertAssignedTo", fields: [assignedToId], references: [id])
  createdBy       User?             @relation("AlertCreatedBy", fields: [createdById], references: [id])
  lineItem        WorkflowLineItem? @relation(fields: [lineItemId], references: [id])
  phase           WorkflowPhase?    @relation(fields: [phaseId], references: [id])
  project         Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  section         WorkflowSection?  @relation(fields: [sectionId], references: [id])

  @@unique([projectId, lineItemId, status], map: "unique_active_alert_new")
  @@index([projectId, status])
  @@index([assignedToId, status])
  @@index([lineItemId, status])
  @@index([createdAt(sort: Desc), projectId])
  @@index([phaseId, sectionId])
  @@map("workflow_alerts")
}

model Task {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  title          String           @db.VarChar(255)
  description    String?          @db.VarChar(2000)
  dueDate        DateTime
  status         TaskStatus       @default(TO_DO)
  priority       Priority         @default(MEDIUM)
  estimatedHours Int?
  actualHours    Int?
  category       TaskCategory     @default(OTHER)
  tags           String[]
  notes          String?
  completedAt    DateTime?
  projectId      String           @map("project_id")
  assignedToId   String           @map("assigned_to_id")
  createdById    String?          @map("created_by_id")
  dependents     TaskDependency[] @relation("DependentTask")
  dependencies   TaskDependency[] @relation("ParentTask")
  assignedTo     User             @relation("AssignedUser", fields: [assignedToId], references: [id])
  createdBy      User?            @relation("CreatedByUser", fields: [createdById], references: [id])
  project        Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model TaskDependency {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  parentTaskId    String   @map("parent_task_id")
  dependentTaskId String   @map("dependent_task_id")
  dependentTask   Task     @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)
  parentTask      Task     @relation("ParentTask", fields: [parentTaskId], references: [id], onDelete: Cascade)

  @@unique([parentTaskId, dependentTaskId])
  @@map("task_dependencies")
}

model Document {
  id               String             @id @default(cuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  fileName         String             @db.VarChar(255)
  originalName     String             @db.VarChar(255)
  fileUrl          String             @db.VarChar(2000)
  mimeType         String             @db.VarChar(100)
  fileSize         Int
  fileType         DocumentType
  description      String?            @db.VarChar(500)
  tags             String[]
  version          Int                @default(1)
  isActive         Boolean            @default(true)
  downloadCount    Int                @default(0)
  lastDownloadedAt DateTime?
  checksum         String?            @db.VarChar(255)
  isPublic         Boolean            @default(false)
  projectId        String             @map("project_id")
  uploadedById     String             @map("uploaded_by_id")
  searchVector     String?
  downloads        DocumentDownload[]
  project          Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedBy       User               @relation("UploadedBy", fields: [uploadedById], references: [id])
  generatedDocuments GeneratedDocumentMeta[]

  @@map("documents")
}

model DocumentDownload {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  documentId String   @map("document_id")
  userId     String   @map("user_id")
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("document_downloads")
}

model ProjectMessage {
  id                String                    @id @default(cuid())
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  content           String                    @db.VarChar(2000)
  subject           String                    @db.VarChar(255)
  messageType       ProjectMessageType        @default(WORKFLOW_UPDATE)
  priority          MessagePriority           @default(MEDIUM)
  authorId          String?                   @map("author_id")
  authorName        String                    @db.VarChar(100)
  authorRole        String?                   @db.VarChar(50)
  projectId         String                    @map("project_id")
  projectNumber     Int
  workflowId        String?                   @map("workflow_id")
  stepId            String?                   @map("step_id")
  stepName          String?                   @db.VarChar(255)
  phase             ProjectPhase?
  section           String?                   @db.VarChar(255)
  lineItem          String?                   @db.VarChar(255)
  isSystemGenerated Boolean                   @default(false)
  isWorkflowMessage Boolean                   @default(false)
  parentMessageId   String?                   @map("parent_message_id")
  readBy            String[]                  @default([])
  readCount         Int                       @default(0)
  metadata          Json?
  searchVector      String?
  recipients        ProjectMessageRecipient[]
  author            User?                     @relation("MessageAuthor", fields: [authorId], references: [id])
  parentMessage     ProjectMessage?           @relation("MessageReplies", fields: [parentMessageId], references: [id])
  replies           ProjectMessage[]          @relation("MessageReplies")
  project           Project                   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, createdAt])
  @@index([workflowId, stepId])
  @@index([phase])
  @@index([isSystemGenerated])
  @@index([authorId])
  @@map("project_messages")
}

model ProjectMessageRecipient {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  messageId String         @map("message_id")
  userId    String         @map("user_id")
  message   ProjectMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([userId])
  @@map("project_message_recipients")
}

model Conversation {
  id           String                    @id @default(cuid())
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  title        String?                   @db.VarChar(255)
  description  String?                   @db.VarChar(500)
  isGroup      Boolean                   @default(false)
  isActive     Boolean                   @default(true)
  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  conversationId String           @map("conversation_id")
  userId         String           @map("user_id")
  joinedAt       DateTime         @default(now())
  leftAt         DateTime?
  role           ConversationRole @default(MEMBER)
  conversation   Conversation     @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  text           String        @db.VarChar(2000)
  messageType    MessageType   @default(TEXT)
  isEdited       Boolean       @default(false)
  editedAt       DateTime?
  isDeleted      Boolean       @default(false)
  deletedAt      DateTime?
  conversationId String        @map("conversation_id")
  senderId       String        @map("sender_id")
  replyToId      String?       @map("reply_to_id")
  attachments    Json?
  reactions      Json?
  systemData     Json?
  readBy         MessageRead[]
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  replyTo        Message?      @relation("MessageReplies", fields: [replyToId], references: [id])
  replies        Message[]     @relation("MessageReplies")
  sender         User          @relation("Sender", fields: [senderId], references: [id])

  @@map("messages")
}

model MessageRead {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  messageId String   @map("message_id")
  userId    String   @map("user_id")
  readAt    DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_reads")
}

model CalendarEvent {
  id             String                  @id @default(cuid())
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  title          String                  @db.VarChar(255)
  description    String?                 @db.VarChar(2000)
  startTime      DateTime
  endTime        DateTime
  location       String?                 @db.VarChar(500)
  isAllDay       Boolean                 @default(false)
  eventType      EventType               @default(MEETING)
  status         EventStatus             @default(CONFIRMED)
  isRecurring    Boolean                 @default(false)
  recurrenceRule String?                 @db.VarChar(500)
  parentEventId  String?                 @map("parent_event_id")
  organizerId    String                  @map("organizer_id")
  projectId      String?                 @map("project_id")
  attendees      CalendarEventAttendee[]
  organizer      User                    @relation("Organizer", fields: [organizerId], references: [id])
  parentEvent    CalendarEvent?          @relation("EventRecurrence", fields: [parentEventId], references: [id])
  childEvents    CalendarEvent[]         @relation("EventRecurrence")
  project        Project?                @relation(fields: [projectId], references: [id])

  @@map("calendar_events")
}

model CalendarEventAttendee {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  eventId   String           @map("event_id")
  userId    String           @map("user_id")
  status    AttendeeStatus   @default(REQUIRED)
  response  AttendeeResponse @default(NO_RESPONSE)
  event     CalendarEvent    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("calendar_event_attendees")
}

model Notification {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  title       String           @db.VarChar(255)
  message     String           @db.VarChar(2000)
  type        NotificationType
  isRead      Boolean          @default(false)
  readAt      DateTime?
  actionUrl   String?          @db.VarChar(2000)
  actionData  Json?
  recipientId String           @map("recipient_id")
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model RoleAssignment {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  roleType     RoleType @unique @map("role_type")
  userId       String   @map("user_id")
  assignedAt   DateTime @map("assigned_at")
  assignedById String?  @map("assigned_by_id")
  isActive     Boolean  @default(true)
  assignedBy   User?    @relation("AssignedRoles", fields: [assignedById], references: [id])
  user         User     @relation("RoleAssignments", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([roleType])
  @@index([assignedAt])
  @@index([roleType, isActive])
  @@map("role_assignments")
}

model WorkflowPhase {
  id              String                   @id @default(cuid())
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  phaseName       String                   @db.VarChar(255)
  phaseType       ProjectPhase
  displayOrder    Int
  description     String?                  @db.VarChar(500)
  isActive        Boolean                  @default(true)
  isCurrent       Boolean                  @default(true)
  version         Int                      @default(1)
  workflowType    WorkflowType             @default(ROOFING)
  projectTrackers ProjectWorkflowTracker[]
  alerts          WorkflowAlert[]
  sections        WorkflowSection[]

  @@unique([phaseType, workflowType])
  @@index([workflowType])
  @@map("workflow_phases")
}

model WorkflowSection {
  id              String                   @id @default(cuid())
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  sectionNumber   String                   @db.VarChar(10)
  sectionName     String                   @db.VarChar(255)
  displayName     String                   @db.VarChar(255)
  displayOrder    Int
  description     String?                  @db.VarChar(500)
  isActive        Boolean                  @default(true)
  phaseId         String                   @map("phase_id")
  isCurrent       Boolean                  @default(true)
  version         Int                      @default(1)
  workflowType    WorkflowType             @default(ROOFING)
  projectTrackers ProjectWorkflowTracker[]
  alerts          WorkflowAlert[]
  lineItems       WorkflowLineItem[]
  phase           WorkflowPhase            @relation(fields: [phaseId], references: [id], onDelete: Cascade)

  @@unique([phaseId, sectionNumber])
  @@index([phaseId])
  @@index([workflowType])
  @@map("workflow_sections")
}

model WorkflowLineItem {
  id               String                   @id @default(cuid())
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  itemLetter       String                   @db.VarChar(10)
  itemName         String                   @db.VarChar(500)
  responsibleRole  ResponsibleRole
  displayOrder     Int
  description      String?                  @db.VarChar(2000)
  isActive         Boolean                  @default(true)
  estimatedMinutes Int                      @default(30)
  alertDays        Int                      @default(1)
  sectionId        String                   @map("section_id")
  isCurrent        Boolean                  @default(true)
  searchVector     String?
  version          Int                      @default(1)
  daysToComplete   Int                      @default(1) @map("days_to_complete")
  workflowType     WorkflowType             @default(ROOFING)
  progressTrackers ProjectWorkflowTracker[]
  alerts           WorkflowAlert[]
  section          WorkflowSection          @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([sectionId, itemLetter])
  @@index([sectionId])
  @@index([sectionId, displayOrder])
  @@index([isActive, displayOrder])
  @@index([workflowType])
  @@map("workflow_line_items")
}

model ProjectWorkflowTracker {
  id                  String                  @id @default(cuid())
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  projectId           String                  @map("project_id")
  currentPhaseId      String?                 @map("current_phase_id")
  currentSectionId    String?                 @map("current_section_id")
  currentLineItemId   String?                 @map("current_line_item_id")
  lastCompletedItemId String?                 @map("last_completed_item_id")
  phaseStartedAt      DateTime?
  sectionStartedAt    DateTime?
  lineItemStartedAt   DateTime?
  isMainWorkflow      Boolean                 @default(true) @map("is_main_workflow")
  tradeName           String?                 @map("trade_name") @db.VarChar(100)
  workflowType        WorkflowType            @default(ROOFING)
  totalLineItems      Int?                    @default(0)
  completedItems      CompletedWorkflowItem[]
  currentLineItem     WorkflowLineItem?       @relation(fields: [currentLineItemId], references: [id])
  currentPhase        WorkflowPhase?          @relation(fields: [currentPhaseId], references: [id])
  currentSection      WorkflowSection?        @relation(fields: [currentSectionId], references: [id])
  project             Project                 @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, workflowType])
  @@index([currentLineItemId])
  @@index([projectId, currentPhaseId])
  @@index([projectId, isMainWorkflow])
  @@map("project_workflow_trackers")
}

model CompletedWorkflowItem {
  id            String                 @id @default(cuid())
  createdAt     DateTime               @default(now())
  trackerId     String                 @map("tracker_id")
  phaseId       String                 @map("phase_id")
  sectionId     String                 @map("section_id")
  lineItemId    String                 @map("line_item_id")
  completedAt   DateTime               @default(now())
  completedById String?                @map("completed_by_id")
  notes         String?
  completedBy   User?                  @relation(fields: [completedById], references: [id])
  tracker       ProjectWorkflowTracker @relation(fields: [trackerId], references: [id], onDelete: Cascade)

  @@index([trackerId])
  @@index([completedAt])
  @@index([trackerId, lineItemId])
  @@index([trackerId, completedAt])
  @@map("completed_workflow_items")
}

model UserDevice {
  id                String    @id @default(cuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String    @map("user_id")
  deviceFingerprint String    @unique @map("device_fingerprint") @db.VarChar(255)
  deviceName        String?   @map("device_name") @db.VarChar(100)
  deviceType        String?   @map("device_type") @db.VarChar(50)
  userAgent         String?   @map("user_agent") @db.VarChar(500)
  ipAddress         String?   @map("ip_address") @db.VarChar(45)
  location          Json?
  trusted           Boolean   @default(false)
  biometricEnabled  Boolean   @default(false) @map("biometric_enabled")
  lastUsed          DateTime? @map("last_used")
  isActive          Boolean   @default(true) @map("is_active")
  user              User      @relation("UserDevices", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([deviceFingerprint])
  @@index([lastUsed])
  @@index([trusted, isActive])
  @@map("user_devices")
}

model UserMFA {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @map("user_id")
  method      MFAMethod
  secret      String?   @db.VarChar(255)
  backupCodes String[]  @map("backup_codes")
  phoneNumber String?   @map("phone_number") @db.VarChar(20)
  enabled     Boolean   @default(false)
  lastUsed    DateTime? @map("last_used")
  user        User      @relation("UserMFA", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([method, enabled])
  @@map("user_mfa")
}

model SecurityEvent {
  id         String            @id @default(cuid())
  createdAt  DateTime          @default(now())
  userId     String?           @map("user_id")
  eventType  SecurityEventType @map("event_type")
  riskScore  Int?              @map("risk_score")
  details    Json?
  ipAddress  String?           @map("ip_address") @db.VarChar(45)
  userAgent  String?           @map("user_agent") @db.VarChar(500)
  deviceId   String?           @map("device_id")
  resolved   Boolean           @default(false)
  resolvedAt DateTime?         @map("resolved_at")
  resolvedBy String?           @map("resolved_by")
  response   Json?
  resolver   User?             @relation("SecurityEventResolver", fields: [resolvedBy], references: [id])
  user       User?             @relation("SecurityEvents", fields: [userId], references: [id])

  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
  @@index([riskScore])
  @@index([resolved])
  @@map("security_events")
}

model UserBehaviorPattern {
  id                String    @id @default(cuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String    @unique @map("user_id")
  keystrokePatterns Json?     @map("keystroke_patterns")
  mousePatterns     Json?     @map("mouse_patterns")
  touchPatterns     Json?     @map("touch_patterns")
  usagePatterns     Json?     @map("usage_patterns")
  voicePattern      Json?     @map("voice_pattern")
  riskBaseline      Decimal?  @map("risk_baseline") @db.Decimal(5, 2)
  anomalyThreshold  Decimal?  @map("anomaly_threshold") @db.Decimal(5, 2)
  lastAnalysis      DateTime? @map("last_analysis")
  user              User      @relation("UserBehavior", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([lastAnalysis])
  @@map("user_behavior_patterns")
}

model WebAuthnCredential {
  id                  String    @id @default(cuid())
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  userId              String    @map("user_id")
  credentialID        String    @unique @map("credential_id") @db.VarChar(255)
  credentialPublicKey Bytes     @map("credential_public_key")
  counter             Int       @default(0)
  deviceType          String    @map("device_type") @db.VarChar(50)
  backedUp            Boolean   @default(false) @map("backed_up")
  transports          String[]
  nickname            String?   @db.VarChar(100)
  lastUsed            DateTime? @map("last_used")
  isActive            Boolean   @default(true) @map("is_active")
  user                User      @relation("UserWebAuthn", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([credentialID])
  @@index([lastUsed])
  @@map("webauthn_credentials")
}

model VoiceTranscript {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  sessionId          String    @unique @map("session_id") @db.VarChar(100)
  projectId          String?   @map("project_id")
  userId             String?   @map("user_id")
  callDate           DateTime  @map("call_date")
  startTime          DateTime  @map("start_time")
  endTime            DateTime  @map("end_time")
  duration           String    @db.VarChar(50)
  participantCount   Int       @default(1) @map("participant_count")
  executiveSummary   String?
  projectStatus      String?   @db.VarChar(500)
  keyDecisions       Json?     @map("key_decisions")
  actionItems        Json?     @map("action_items")
  materials          Json?     @map("materials_list")
  schedule           Json?     @map("schedule_timeline")
  risks              Json?     @map("risks_issues")
  budget             Json?     @map("budget_costs")
  technicalDetails   Json?     @map("technical_details")
  clientConcerns     Json?     @map("client_concerns")
  nextSteps          Json?     @map("next_steps")
  communicationItems Json?     @map("communication_items")
  fullTranscript     Json      @map("full_transcript")
  aiModel            String?   @map("ai_model") @db.VarChar(50)
  aiProcessedAt      DateTime? @map("ai_processed_at")
  isAiEnhanced       Boolean   @default(false) @map("is_ai_enhanced")
  generatedFiles     Json?     @map("generated_files")
  project            Project?  @relation(fields: [projectId], references: [id])
  user               User?     @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
  @@index([callDate])
  @@index([sessionId])
  @@map("voice_transcripts")
}

enum WorkflowState {
  PENDING
  ACTIVE
  IN_PROGRESS
  BLOCKED
  COMPLETED
  SKIPPED

  @@map("workflow_states")
}

enum UserRole {
  ADMIN
  MANAGER
  PROJECT_MANAGER
  FOREMAN
  WORKER
  CLIENT

  @@map("user_roles")
}

enum Permission {
  CREATE_PROJECTS
  EDIT_PROJECTS
  DELETE_PROJECTS
  MANAGE_USERS
  VIEW_REPORTS
  MANAGE_FINANCES
  MANAGE_DOCUMENTS
  MANAGE_CALENDAR
  USE_AI_FEATURES

  @@map("permissions")
}

enum Theme {
  LIGHT
  DARK
  AUTO

  @@map("themes")
}

enum ContactType {
  PRIMARY
  SECONDARY

  @@map("contact_types")
}

enum ProjectType {
  ROOFING
  GUTTERS
  INTERIOR_PAINT

  @@map("project_types")
}

enum ProjectStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD

  @@map("project_statuses")
}

enum Priority {
  LOW
  MEDIUM
  HIGH

  @@map("priorities")
}

enum ProjectPhase {
  LEAD
  PROSPECT
  APPROVED
  EXECUTION
  SECOND_SUPPLEMENT
  COMPLETION

  @@map("project_phases")
}

enum WorkflowType {
  ROOFING
  KITCHEN_REMODEL
  BATHROOM_RENOVATION
  SIDING
  WINDOWS
  GENERAL
  GUTTERS
  INTERIOR_PAINT

  @@map("workflow_types")
}

enum WorkflowStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED

  @@map("workflow_statuses")
}

enum ResponsibleRole {
  OFFICE
  ADMINISTRATION
  PROJECT_MANAGER
  FIELD_DIRECTOR
  ROOF_SUPERVISOR
  OFFICE_STAFF

  @@map("responsible_roles")
}

enum AlertPriority {
  LOW
  MEDIUM
  HIGH

  @@map("alert_priorities")
}

enum AlertMethod {
  IN_APP
  EMAIL
  SMS

  @@map("alert_methods")
}

enum AlertStatus {
  ACTIVE
  ACKNOWLEDGED
  DISMISSED
  COMPLETED

  @@map("alert_status")
}

enum TaskStatus {
  TO_DO
  IN_PROGRESS
  DONE

  @@map("task_statuses")
}

enum TaskCategory {
  PLANNING
  DESIGN
  CONSTRUCTION
  INSPECTION
  DOCUMENTATION
  COMMUNICATION
  OTHER

  @@map("task_categories")
}

enum DocumentType {
  BLUEPRINT
  PERMIT
  INVOICE
  PHOTO
  CONTRACT
  REPORT
  SPECIFICATION
  CORRESPONDENCE
  OTHER

  @@map("document_types")
}

enum ProjectMessageType {
  WORKFLOW_UPDATE
  PHASE_COMPLETION
  STEP_COMPLETION
  USER_MESSAGE
  SYSTEM_NOTIFICATION
  ALERT_DISCUSSION
  PROJECT_MILESTONE

  @@map("project_message_types")
}

enum MessagePriority {
  LOW
  MEDIUM
  HIGH
  URGENT

  @@map("message_priorities")
}

enum ConversationRole {
  ADMIN
  MODERATOR
  MEMBER

  @@map("conversation_roles")
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
  NOTIFICATION

  @@map("message_types")
}

enum EventType {
  MEETING
  INSPECTION
  INSTALLATION
  DEADLINE
  REMINDER
  OTHER

  @@map("event_types")
}

enum EventStatus {
  CONFIRMED
  TENTATIVE
  CANCELLED

  @@map("event_statuses")
}

enum AttendeeStatus {
  REQUIRED
  OPTIONAL
  ORGANIZER

  @@map("attendee_statuses")
}

enum AttendeeResponse {
  ACCEPTED
  DECLINED
  TENTATIVE
  NO_RESPONSE

  @@map("attendee_responses")
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_COMPLETED
  PROJECT_UPDATE
  WORKFLOW_ALERT
  SYSTEM_MESSAGE
  REMINDER

  @@map("notification_types")
}

enum RoleType {
  PROJECT_MANAGER
  FIELD_DIRECTOR
  OFFICE_STAFF
  ADMINISTRATION

  @@map("role_types")
}

enum MFAMethod {
  TOTP
  SMS
  WEBAUTHN
  BACKUP
  EMAIL
}

enum SecurityEventType {
  LOGIN_SUCCESS
  LOGIN_FAILURE
  LOGIN_BLOCKED
  MFA_SUCCESS
  MFA_FAILURE
  DEVICE_NEW
  DEVICE_SUSPICIOUS
  LOCATION_NEW
  LOCATION_SUSPICIOUS
  BEHAVIOR_ANOMALY
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  PASSWORD_CHANGED
  MFA_ENABLED
  MFA_DISABLED
  DEVICE_TRUSTED
  DEVICE_REMOVED
  SECURITY_QUESTION_FAILED
  BRUTE_FORCE_DETECTED
  CREDENTIAL_CREATED
  CREDENTIAL_DELETED
}

// Company Documents Models
model CompanyAsset {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  title            String   @db.VarChar(255)
  description      String?  @db.VarChar(1000)
  fileUrl          String   @db.VarChar(2000)
  mimeType         String   @db.VarChar(100)
  fileSize         Int
  tags             String[]
  section          DocumentSection?
  version          Int      @default(1)
  isActive         Boolean  @default(true)
  downloadCount    Int      @default(0)
  lastDownloadedAt DateTime?
  uploadedById     String?  @map("uploaded_by_id")
  uploadedBy       User?    @relation(fields: [uploadedById], references: [id])

  @@map("company_assets")
}

model DocumentTemplate {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String          @db.VarChar(255)
  description    String?         @db.VarChar(1000)
  format         TemplateFormat
  section        DocumentSection?
  templateFileUrl String         @db.VarChar(2000)
  isActive       Boolean         @default(true)
  version        Int             @default(1)
  createdById    String?         @map("created_by_id")
  createdBy      User?           @relation(fields: [createdById], references: [id])
  fields         TemplateField[]
  generatedDocuments GeneratedDocumentMeta[]

  @@map("document_templates")
}

model TemplateField {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  key            String           @db.VarChar(100)
  label          String           @db.VarChar(255)
  type           TemplateFieldType
  required       Boolean          @default(false)
  defaultValue   String?          @db.VarChar(500)
  options        String[]
  validation     String?          @db.VarChar(500)
  order          Int              @default(0)
  templateId     String           @map("template_id")
  template       DocumentTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("template_fields")
}

model GeneratedDocumentMeta {
  id             String            @id @default(cuid())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  documentId     String            @map("document_id")
  templateId     String?           @map("template_id")
  sourceData     Json
  generatedBy    String?           @map("generated_by")
  createdById    String?           @map("created_by_id")
  document       Document          @relation(fields: [documentId], references: [id], onDelete: Cascade)
  template       DocumentTemplate? @relation(fields: [templateId], references: [id])
  createdBy      User?             @relation(fields: [createdById], references: [id])

  @@map("generated_document_meta")
}

// Company Documents Enums
enum DocumentSection {
  EIGHT_ELEVEN_INFO            // "811 Info"
  CHECKLISTS
  CUSTOMER_INFORMATIONALS
  CONTRACTS_SIGNED_DOCUMENTS   // "Contracts & Signed Documents"
  JOB_SITE_PAPERWORK
  OFFICE_DOCUMENTS
  PROJECT_MANAGEMENT_DOCUMENTS
  SALES_MATERIALS_INFORMATION  // "Sales, Materials & Info"
  SOPS_TRAINING                // "SOPs & Training"
  CERTS_WARRANTIES_INSPECTIONS // "Certifications, Warranties & Inspections"
  INSURANCE_CERTIFICATIONS
}

enum TemplateFormat {
  DOCX
  HTML
  PDF
}

enum TemplateFieldType {
  TEXT
  TEXTAREA
  NUMBER
  DATE
  SELECT
  MULTISELECT
  BOOLEAN
  FILE
}

enum OutputFormat {
  PDF
  DOCX
  HTML
}
